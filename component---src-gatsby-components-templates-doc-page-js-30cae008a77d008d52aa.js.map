{"version":3,"sources":["webpack:///./src/gatsby/components/templates/doc-page.js"],"names":["renderAst","RehypeReact","createElement","React","components","demo","Demo","demovanilla","DemoVanilla","Compiler","Template","render","data","this","props","seo","title","post","frontmatter","split","map","item","charAt","toUpperCase","slice","toLowerCase","join","parent","category","type","description","page","htmlAst","postsAdiacent","posts","length","className","i","adiacent","demos","key","role","data-gatsby-listing-toggle","src","data-iframe-fullscreen","to","markdownSlug","Component","query"],"mappings":"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","file":"component---src-gatsby-components-templates-doc-page-js-30cae008a77d008d52aa.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\nimport RehypeReact from 'rehype-react'\nimport { markdownSlug } from 'components/snippets/markdown-slug'\n\nimport SEO from 'components/seo'\nimport Layout from 'components/layout'\nimport Demo from 'components/demo/demo'\nimport DemoVanilla from 'components/demo/demo-vanilla'\n\nconst renderAst = new RehypeReact({\n  createElement: React.createElement,\n  components: { demo: Demo, demovanilla: DemoVanilla },\n}).Compiler\n\nclass Template extends React.Component {\n  render() {\n    const { data } = this.props\n    const seo = {}\n    seo.title = data.post.frontmatter.title\n    seo.title = seo.title\n      .split(/[\\s-]+/)\n      .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n      .join(' ')\n    seo.title =\n      data.post.frontmatter.parent && data.post.frontmatter.parent !== data.post.frontmatter.title ? `${data.post.frontmatter.parent} ${seo.title}` : seo.title\n    seo.title += ' - '\n    seo.title += data.post.frontmatter.category && data.post.frontmatter.category !== data.post.frontmatter.title ? ` ${data.post.frontmatter.category}` : ''\n    seo.title += data.post.frontmatter.type && data.post.frontmatter.type !== data.post.frontmatter.title ? ` ${data.post.frontmatter.type}` : ''\n    seo.description = data.post.frontmatter.description ? data.post.frontmatter.description : data.parent.frontmatter.description\n    return (\n      <Layout page={data}>\n        <SEO title={seo.title} description={seo.description} />\n        {data.post.htmlAst !== '<div></div>' ? renderAst(data.post.htmlAst) : null}\n        {data.post.frontmatter.parent === data.post.frontmatter.title ? (\n          data.postsAdiacent.posts.length > 1 ? (\n            <div className=\"gatsby_listing\">\n              <div className=\"row row-3\">\n                <div className=\"gatsby_listing-group\">\n                  {data.post.frontmatter.category === 'Core' ? (\n                    <h2 className=\"h5 h-block rounded-md text-black links-default bg-gray-200 text-center\">{'Customization and interactions'}</h2>\n                  ) : null}\n                  <div className=\"gatsby_listing-items\">\n                    <div className=\"row\">\n                      {data.postsAdiacent.posts.map(({ post: adiacent }, i) =>\n                        adiacent.frontmatter.parent !== adiacent.frontmatter.title ? (\n                          adiacent.frontmatter.demos ? (\n                            <div className=\"gatsby_listing-column\" key={i}>\n                              <a role=\"button\" className=\"card gatsby_listing-item\" data-gatsby-listing-toggle>\n                                <div className=\"h4\">\n                                  {adiacent.frontmatter.title\n                                    .split(/[\\s-]+/)\n                                    .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                    .join(' ')}\n                                </div>\n                                <p>{adiacent.frontmatter.description}</p>\n                              </a>\n                              {adiacent.frontmatter.demos ? (\n                                <Demo>\n                                  {adiacent.frontmatter.demos.map((demo, i) => {\n                                    const type = demo.split('/')[0]\n                                    if (type === 'vanilla') {\n                                      return <DemoVanilla src={demo} key={i}></DemoVanilla>\n                                    } else if (type === 'iframe') {\n                                      return <div className=\"gatsby_demo_item toggle\" data-iframe-fullscreen={demo} key={i}></div>\n                                    }\n                                  })}\n                                </Demo>\n                              ) : null}\n                            </div>\n                          ) : (\n                            <div className=\"gatsby_listing-column\" key={i}>\n                              <Link to={markdownSlug(adiacent)} className=\"card gatsby_listing-item\">\n                                <div className=\"h4\">\n                                  {adiacent.frontmatter.title\n                                    .split(/[\\s-]+/)\n                                    .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                    .join(' ')}\n                                </div>\n                                <p>\n                                  {adiacent.frontmatter.description\n                                    ? adiacent.frontmatter.description\n                                    : `${adiacent.frontmatter.parent}'s ${adiacent.frontmatter.title\n                                        .split(/[\\s-]+/)\n                                        .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                        .join(' ')}`}\n                                </p>\n                              </Link>\n                            </div>\n                          )\n                        ) : null\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : null\n        ) : null}\n      </Layout>\n    )\n  }\n}\n\nexport const query = graphql`\n  query($title: String!, $type: String, $category: String, $parent: String, $parents: String) {\n    categories: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type } } }\n      sort: { fields: [frontmatter___date, frontmatter___title], order: [DESC, ASC] }\n    ) {\n      category: group(field: frontmatter___category) {\n        title: fieldValue\n        posts: edges {\n          post: node {\n            frontmatter {\n              type\n              category\n              parent\n              title\n              description\n              link\n            }\n          }\n        }\n      }\n    }\n    postsAll: allMarkdownRemark {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n            description\n          }\n        }\n      }\n    }\n    postsAdiacent: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type }, category: { eq: $category }, parent: { regex: $parents } } }\n      sort: { fields: [frontmatter___date, frontmatter___title], order: [DESC, ASC] }\n    ) {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n            description\n            demos\n          }\n        }\n      }\n    }\n    parent: markdownRemark(frontmatter: { title: { eq: $parent }, category: { eq: $category } }) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        description\n        title\n      }\n    }\n    post: markdownRemark(frontmatter: { type: { eq: $type }, parent: { eq: $parent }, category: { eq: $category }, title: { eq: $title } }) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        title\n        description\n      }\n    }\n  }\n`\n\nTemplate.propTypes = {\n  data: PropTypes.shape({\n    categories: PropTypes.shape({\n      category: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          posts: PropTypes.arrayOf(\n            PropTypes.shape({\n              post: PropTypes.shape({\n                frontmatter: PropTypes.shape({\n                  type: PropTypes.string.isRequired,\n                  category: PropTypes.string,\n                  parent: PropTypes.string,\n                  title: PropTypes.string.isRequired,\n                  description: PropTypes.string,\n                }).isRequired,\n              }).isRequired,\n            }).isRequired\n          ),\n        }).isRequired\n      ),\n    }),\n    postsAll: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              category: PropTypes.string,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ),\n    }).isRequired,\n    postsAdiacent: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              category: PropTypes.string,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n              demos: PropTypes.array,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ),\n    }).isRequired,\n    parent: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n      }).isRequired,\n    }),\n    post: PropTypes.shape({\n      htmlAst: PropTypes.object.isRequired,\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n}\n\nexport default Template\n"],"sourceRoot":""}