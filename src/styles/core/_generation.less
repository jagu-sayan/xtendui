& when not (@classes--util = false) {

  /*
  //////////////////////
  // grid
  //////////////////////

  // generate-grid

  .generate-grid(@breakpoint:none; @i:1) when (@i =< @columns) {
    .generate-grid(@breakpoint; (@i + 1));
    & when (@breakpoint = none) {
      .col--@{i} {
        .col(@i) !important;
      }
    }
    & when not (@breakpoint = none) {
      .col--@{i}-@{breakpoint} {
        .col(@i) !important;
      }
    }
  }

  // generate-grids

  .generate-grids();
  .generate-grids(@breakpoint:none) {
    & when (@breakpoint = none) {
      // grid
      .col--auto {
        .col--auto() !important;
      }
      .generate-grid() !important;
    }
    & when not (@breakpoint = none) {
      @query-min: 'min-@{breakpoint}';
      @media @@query-min {
        // grid
        .col--auto-@{breakpoint} {
          .col--auto() !important;
        }
        .generate-grid(@breakpoint) !important;
      }
    }
  }

  // generate-grid-responsive

  & when not (@classes--grid = true) {

    .generate-grid-responsive();
    .generate-grid-responsive(@i:length(@classes--grid)) when (@i > 0) {
      .generate-grid-responsive(@i - 1);
      @breakpoint: extract(@classes--grid, @i);
      .generate-grids(@breakpoint);
    }

  }*/
  //////////////////////
  // util
  //////////////////////
  
  // generate-utils
  
  .generate-utils();
  .generate-utils(@breakpoint:none) {
    & when (@breakpoint = none) {
      // various
      .reset-text {
        .reset-text() !important;
      }
      .pointer-events--none {
        .pointer-events--none() !important;
      }
      .links--none {
        .links--none() !important;
      }
      .text-capitalize {
        .text-capitalize() !important;
      }
      .overflow-style {
        .overflow-style() !important;
      }
      .design-setup {
        .design-setup() !important;
      }
      .clearfix {
        .clearfix() !important;
      }
      .user-select--none {
        .user-select--none() !important;
      }
      .user-select--text {
        .user-select--text() !important;
      }
      .accelerate {
        .accelerate() !important;
      }
      .sr-only {
        .sr-only() !important;
      }
      // toggle
      .toggle--block {
        .toggle--block() !important;
      }
      .toggle--flex {
        .toggle--flex() !important;
      }
      .toggle--inline-flex {
        .toggle--inline-flex() !important;
      }
      .toggle--inline {
        .toggle--inline() !important;
      }
      .toggle--inline-block {
        .toggle--inline-block() !important;
      }
      .toggle--none {
        .toggle--none() !important;
      }
      .toggle--visible {
        .toggle--visible() !important;
      }
      .toggle--hidden {
        .toggle--hidden() !important;
      }
      // animation
      .transition-none {
        .transition-none() !important;
      }
      .animation-none {
        .animation-none() !important;
      }
      .trans-anim-none {
        .trans-anim-none() !important;
      }
      .transform-none {
        .transform-none() !important;
      }
      .duration-none {
        .duration-none() !important;
      }
      // responsive
      .responsive {
        .responsive() !important;
      }
      .responsive-y {
        .responsive-y() !important;
      }
      // full
      .full {
        .full() !important;
      }
      .full-y {
        .full-y() !important;
      }
      // block
      .block {
        .block() !important;
      }
      // text-transform
      .generate-text-transform(@breakpoint);
      // text-align
      .generate-text-align(@breakpoint);
      // float
      .generate-float(@breakpoint);
      // display
      .generate-display(@breakpoint);
      // visibility
      .generate-visibility(@breakpoint);
    }
    & when not (@breakpoint = none) {
      @query-min: 'min-@{breakpoint}';
      @media @@query-min {
        // responsive
        .responsive-@{breakpoint} {
          .responsive() !important;
        }
        .responsive-y-@{breakpoint} {
          .responsive-y() !important;
        }
        // full
        .full-@{breakpoint} {
          .full() !important;
        }
        .full-y-@{breakpoint} {
          .full-y() !important;
        }
        // block
        .block-@{breakpoint} {
          .block() !important;
        }
        // text-transform
        .generate-text-transform(@breakpoint);
        // text-align
        .generate-text-align(@breakpoint);
        // float
        .generate-float(@breakpoint);
        // display
        .generate-display(@breakpoint);
        // visibility
        .generate-visibility(@breakpoint);
      }
    }
  }
  
  // generate-util-responsive
  
  & when not (@classes--util = true) {
    
    .generate-util-responsive();
    .generate-util-responsive(@i:length(@classes--util)) when (@i > 0) {
      .generate-util-responsive(@i - 1);
      @breakpoint: extract(@classes--util, @i);
      .generate-utils(@breakpoint);
    }

  }

  // generate-text-transform

  @text-transform--arr: uppercase, lowercase, capitalize, nowrap;

  .generate-text-transform(@breakpoint:none, @i:length(@text-transform--arr)) when (@i > 0) {
    .generate-text-transform(@breakpoint, @i - 1);
    @val: extract(@text-transform--arr, @i);
    & when (@breakpoint = none) {
      .text-transform--@{val} {
        .text-transform(@val) !important;
      }
    }
    & when not (@breakpoint = none) {
      .text-transform--@{val}-@{breakpoint} {
        .text-transform(@val) !important;
      }
    }
  }

  // generate-text-align

  @text-align--arr: left, right, center;

  .generate-text-align(@breakpoint:none, @i:length(@text-align--arr)) when (@i > 0) {
    .generate-text-align(@breakpoint, @i - 1);
    @val: extract(@text-align--arr, @i);
    & when (@breakpoint = none) {
      .text-align--@{val} {
        .text-align(@val) !important;
      }
    }
    & when not (@breakpoint = none) {
      .text-align--@{val}-@{breakpoint} {
        .text-align(@val) !important;
      }
    }
  }

  // generate-float

  @float--arr: left, right, none;

  .generate-float(@breakpoint:none, @i:length(@float--arr)) when (@i > 0) {
    .generate-float(@breakpoint, @i - 1);
    @val: extract(@float--arr, @i);
    & when (@breakpoint = none) {
      .float--@{val} {
        .float(@val) !important;
      }
    }
    & when not (@breakpoint = none) {
      .float--@{val}-@{breakpoint} {
        .float(@val) !important;
      }
    }
  }

  // generate-display

  @display--arr: none, block, inline-block, flex, inline-flex;

  .generate-display(@breakpoint:none, @i:length(@display--arr)) when (@i > 0) {
    .generate-display(@breakpoint, @i - 1);
    @val: extract(@display--arr, @i);
    & when (@breakpoint = none) {
      .display--@{val} {
        .display(@val) !important;
      }
    }
    & when not (@breakpoint = none) {
      .display--@{val}-@{breakpoint} {
        .display(@val) !important;
      }
    }
  }

  // generate-visibility

  @visibility--arr: hidden, visible;

  .generate-visibility(@breakpoint:none, @i:length(@visibility--arr)) when (@i > 0) {
    .generate-visibility(@breakpoint, @i - 1);
    @val: extract(@visibility--arr, @i);
    & when (@breakpoint = none) {
      .visibility--@{val} {
        .visibility(@val) !important;
      }
    }
    & when not (@breakpoint = none) {
      .visibility--@{val}-@{breakpoint} {
        .visibility(@val) !important;
      }
    }
  }

  //////////////////////

}

& when not (@classes--layout = false) {

  //////////////////////
  // layout
  //////////////////////

  // generate-layouts

  .generate-layouts();
  .generate-layouts(@breakpoint:none) {
    & when (@breakpoint = none) {
      // btn alignment
      .btn--left {
        .btn--left() !important;
      }
      .btn--center {
        .btn--center() !important;
      }
      .btn--right {
        .btn--right() !important;
      }
      // list alignment
      .list--left {
        .list--left() !important;
      }
      .list--center {
        .list--center() !important;
      }
      .list--right {
        .list--right() !important;
      }
      // order
      .generate-order(@breakpoint);
      // row-space
      .generate-row-space(@breakpoint);
      // list-space
      .generate-list-space(@breakpoint);
      // flex util
      .generate-flex-util(@breakpoint);
    }
    & when not (@breakpoint = none) {
      @query-min: 'min-@{breakpoint}';
      @media @@query-min {
        // btn alignment
        .btn--left-@{breakpoint} {
          .btn--left() !important;
        }
        .btn--center-@{breakpoint} {
          .btn--center() !important;
        }
        .btn--right-@{breakpoint} {
          .btn--right() !important;
        }
        // list alignment
        .list--left-@{breakpoint} {
          .list--left() !important;
        }
        .list--center-@{breakpoint} {
          .list--center() !important;
        }
        .list--right-@{breakpoint} {
          .list--right() !important;
        }
        // order
        .generate-order(@breakpoint);
        // row-space
        .generate-row-space(@breakpoint);
        // list-space
        .generate-list-space(@breakpoint);
        // flex util
        .generate-flex-util(@breakpoint);
      }
    }
  }

  // generate-layout-responsive

  & when not (@classes--layout = true) {

    .generate-layout-responsive();
    .generate-layout-responsive(@i:length(@classes--layout)) when (@i > 0) {
      .generate-layout-responsive(@i - 1);
      @breakpoint: extract(@classes--layout, @i);
      .generate-layouts(@breakpoint);
    }

  }

  // generate-order

  .generate-order(@breakpoint:none, @i:length(@orders)) when (@i > 0) {
    .generate-order(@breakpoint, @i - 1);
    @num: @i - 1;
    & when (@breakpoint = none) {
      .order--@{num} {
        .order(@num) !important;
      }
    }
    & when not (@breakpoint = none) {
      .order--@{num}-@{breakpoint} {
        .order(@num) !important;
      }
    }
  }

  // generate-row-space

  .generate-row-space(@breakpoint:none, @i:length(@row-spaces)) when (@i > 0) {
    .generate-row-space(@breakpoint, @i - 1);
    @name: extract(@row-spaces, @i);
    & when (@breakpoint = none) {
      .row-space--y-@{name} {
        .row-space--y(@name) !important;
      }
      .row-space--x-@{name} {
        .row-space--x(@name) !important;
      }
      .row-space--@{name} {
        .row-space(@name) !important;
      }
    }
    & when not (@breakpoint = none) {
      .row-space--y-@{name}-@{breakpoint} {
        .row-space--y(@name) !important;
      }
      .row-space--x-@{name}-@{breakpoint} {
        .row-space--x(@name) !important;
      }
      .row-space--@{name}-@{breakpoint} {
        .row-space(@name) !important;
      }
    }
  }

  // generate-list-space

  .generate-list-space(@breakpoint:none, @i:length(@list-spaces)) when (@i > 0) {
    .generate-list-space(@breakpoint, @i - 1);
    @name: extract(@list-spaces, @i);
    & when (@breakpoint = none) {
      .list-space--y-@{name} {
        .list-space--y(@name) !important;
      }
      .list-space--x-@{name} {
        .list-space--x(@name) !important;
      }
      .list-space--@{name} {
        .list-space(@name) !important;
      }
    }
    & when not (@breakpoint = none) {
      .list-space--y-@{name}-@{breakpoint} {
        .list-space--y(@name) !important;
      }
      .list-space--x-@{name}-@{breakpoint} {
        .list-space--x(@name) !important;
      }
      .list-space--@{name}-@{breakpoint} {
        .list-space(@name) !important;
      }
    }
  }
  
  // .generate-flex-util
  
  .generate-flex-util(@breakpoint:none) {
    & when (@breakpoint = none) {
      .flex--none {
        .flex--none() !important;
      }
      .flex--auto {
        .flex--auto() !important;
      }
      .flex-direction--row {
        .flex-direction(row) !important;
      }
      .flex-direction--row-reverse {
        .flex-direction(row-reverse) !important;
      }
      .flex-direction--column {
        .flex-direction(column) !important;
      }
      .flex-direction--column-reverse {
        .flex-direction(column-reverse) !important;
      }
      .flex-wrap--wrap {
        .flex-wrap(wrap) !important;
      }
      .flex-wrap--wrap-reverse {
        .flex-wrap(wrap-reverse) !important;
      }
      .flex-wrap--nowrap {
        .flex-wrap(nowrap) !important;
      }
      .justify-content--flex-start {
        .justify-content(flex-start) !important;
      }
      .justify-content--flex-end {
        .justify-content(flex-end) !important;
      }
      .justify-content--center {
        .justify-content(center) !important;
      }
      .justify-content--space-between {
        .justify-content(space-between) !important;
      }
      .justify-content--space-around {
        .justify-content(space-around) !important;
      }
      .align-items--flex-start {
        .align-items(flex-start) !important;
      }
      .align-items--flex-end {
        .align-items(flex-end) !important;
      }
      .align-items--center {
        .align-items(center) !important;
      }
      .align-items--baseline {
        .align-items(baseline) !important;
      }
      .align-items--stretch {
        .align-items(stretch) !important;
      }
      .align-content--flex-start {
        .align-content(flex-start) !important;
      }
      .align-content--flex-end {
        .align-content(flex-end) !important;
      }
      .align-content--center {
        .align-content(center) !important;
      }
      .align-content--space-between {
        .align-content(space-between) !important;
      }
      .align-content--space-around {
        .align-content(space-around) !important;
      }
      .align-content--stretch {
        .align-content(stretch) !important;
      }
      .align-self--flex-start {
        .align-self(start) !important;
      }
      .align-self--flex-end {
        .align-self(flex-end) !important;
      }
      .align-self--center {
        .align-self(center) !important;
      }
      .align-self--baseline {
        .align-self(baseline) !important;
      }
      .align-self--stretch {
        .align-self(stretch) !important;
      }
      .align-self--auto {
        .align-self(auto) !important;
      }
    }
    & when not (@breakpoint = none) {
      .flex--none-@{breakpoint} {
        .flex--none() !important;
      }
      .flex--auto-@{breakpoint} {
        .flex--auto() !important;
      }
      .flex-direction--row-@{breakpoint} {
        .flex-direction(row) !important;
      }
      .flex-direction--row-reverse-@{breakpoint} {
        .flex-direction(row-reverse) !important;
      }
      .flex-direction--column-@{breakpoint} {
        .flex-direction(column) !important;
      }
      .flex-direction--column-reverse-@{breakpoint} {
        .flex-direction(column-reverse) !important;
      }
      .flex-wrap--wrap-@{breakpoint} {
        .flex-wrap(wrap) !important;
      }
      .flex-wrap--wrap-reverse-@{breakpoint} {
        .flex-wrap(wrap-reverse) !important;
      }
      .flex-wrap--nowrap-@{breakpoint} {
        .flex-wrap(nowrap) !important;
      }
      .justify-content--flex-start-@{breakpoint} {
        .justify-content(flex-start) !important;
      }
      .justify-content--flex-end-@{breakpoint} {
        .justify-content(flex-end) !important;
      }
      .justify-content--center-@{breakpoint} {
        .justify-content(center) !important;
      }
      .justify-content--space-between-@{breakpoint} {
        .justify-content(space-between) !important;
      }
      .justify-content--space-around-@{breakpoint} {
        .justify-content(space-around) !important;
      }
      .align-items--flex-start-@{breakpoint} {
        .align-items(flex-start) !important;
      }
      .align-items--flex-end-@{breakpoint} {
        .align-items(flex-end) !important;
      }
      .align-items--center-@{breakpoint} {
        .align-items(center) !important;
      }
      .align-items--baseline-@{breakpoint} {
        .align-items(baseline) !important;
      }
      .align-items--stretch-@{breakpoint} {
        .align-items(stretch) !important;
      }
      .align-content--flex-start-@{breakpoint} {
        .align-content(flex-start) !important;
      }
      .align-content--flex-end-@{breakpoint} {
        .align-content(flex-end) !important;
      }
      .align-content--center-@{breakpoint} {
        .align-content(center) !important;
      }
      .align-content--space-between-@{breakpoint} {
        .align-content(space-between) !important;
      }
      .align-content--space-around-@{breakpoint} {
        .align-content(space-around) !important;
      }
      .align-content--stretch-@{breakpoint} {
        .align-content(stretch) !important;
      }
      .align-self--auto-@{breakpoint} {
        .align-self(auto) !important;
      }
      .align-self--flex-start-@{breakpoint} {
        .align-self(flex-start) !important;
      }
      .align-self--flex-end-@{breakpoint} {
        .align-self(flex-end) !important;
      }
      .align-self--center-@{breakpoint} {
        .align-self(center) !important;
      }
      .align-self--baseline-@{breakpoint} {
        .align-self(baseline) !important;
      }
      .align-self--stretch-@{breakpoint} {
        .align-self(stretch) !important;
      }
    }
  }
  
  //////////////////////
  
}

& when not (@classes--grid = false) {

  //////////////////////
  // grid
  //////////////////////

  // generate-grid

  .generate-grid(@breakpoint:none; @i:1) when (@i =< @columns) {
    .generate-grid(@breakpoint; (@i + 1));
    & when (@breakpoint = none) {
      .col--@{i} {
        .col(@i) !important;
      }
    }
    & when not (@breakpoint = none) {
      .col--@{i}-@{breakpoint} {
        .col(@i) !important;
      }
    }
  }

  // generate-grids

  .generate-grids();
  .generate-grids(@breakpoint:none) {
    & when (@breakpoint = none) {
      // grid
      .col--auto {
        .col--auto() !important;
      }
      .generate-grid() !important;
    }
    & when not (@breakpoint = none) {
      @query-min: 'min-@{breakpoint}';
      @media @@query-min {
        // grid
        .col--auto-@{breakpoint} {
          .col--auto() !important;
        }
        .generate-grid(@breakpoint) !important;
      }
    }
  }

  // generate-grid-responsive

  & when not (@classes--grid = true) {

    .generate-grid-responsive();
    .generate-grid-responsive(@i:length(@classes--grid)) when (@i > 0) {
      .generate-grid-responsive(@i - 1);
      @breakpoint: extract(@classes--grid, @i);
      .generate-grids(@breakpoint);
    }

  }

  //////////////////////

}

& when not (@classes--margin = false) {

  //////////////////////
  // margin
  //////////////////////

  @margin--arr: none, y, x, t, b, l, r;

  // layout

  .m-y-layout {
    .margin(y, layout) !important;
  }
  .m-x-layout {
    .margin(x, layout) !important;
  }
  .m-top-layout {
    .margin(top, layout) !important;
  }
  .m-bottom-layout {
    .margin(bottom, layout) !important;
  }
  .m-left-layout {
    .margin(left, layout) !important;
  }
  .m-right-layout {
    .margin(right, layout) !important;
  }

  // generate-margin

  .generate-margins();
  .generate-margins(@breakpoint:none) {
    & when (@breakpoint = none) {
      .generate-margin(@breakpoint);
    }
    & when not (@breakpoint = none) {
      @query-min: 'min-@{breakpoint}';
      @media @@query-min {
        .generate-margin(@breakpoint);
      }
    }
  }

  // generate-margins

  .generate-margin(@breakpoint:none, @i:length(@margin--arr)) when (@i > 0) {
    .generate-margin(@breakpoint, @i - 1);
    @pos: extract(@margin--arr, @i);
    .generate-margin-loop(@pos, @breakpoint);
  }
  .generate-margin-loop(@pos, @breakpoint, @i:length(@margins)) when (@i > 0) {
    .generate-margin-loop(@pos, @breakpoint, @i - 1);
    @margin: extract(@margins, @i);
    @name: extract(@margin, 1);
    @size: extract(@margin, 2);
    & when (@breakpoint = none) {
      & when (@pos = none) {
        .m--@{name} {
          .margin(@pos, @name, @breakpoint) !important;
        }
        & when not (@size = auto) and not (@size = 0) {
          .m--@{name}-remove {
            .margin-remove(@pos, @name, @breakpoint) !important;
          }
        }
      }
      & when not (@pos = none) {
        .m@{pos}--@{name} {
          .margin(@pos, @name, @breakpoint) !important;
        }
        & when not (@size = auto) and not (@size = 0) {
          .m@{pos}--@{name}-remove {
            .margin-remove(@pos, @name, @breakpoint) !important;
          }
        }
      }
    }
    & when not (@breakpoint = none) {
      & when (@pos = none) {
        .m--@{name}-@{breakpoint} {
          .margin(@pos, @name) !important;
        }
        & when not (@size = auto) and not (@size = 0) {
          .m--@{name}-@{breakpoint}-remove {
            .margin-remove(@pos, @name) !important;
          }
        }
      }
      & when not (@pos = none) {
        .m@{pos}--@{name}-@{breakpoint} {
          .margin(@pos, @name) !important;
        }
        & when not (@size = auto) and not (@size = 0) {
          .m@{pos}--@{name}-@{breakpoint}-remove {
            .margin-remove(@pos, @name) !important;
          }
        }
      }
    }
  }

  // generate-margin-responsive

  & when not (@classes--margin = true) {

    .generate-margin-responsive();
    .generate-margin-responsive(@i:length(@classes--margin)) when (@i > 0) {
      .generate-margin-responsive(@i - 1);
      @breakpoint: extract(@classes--margin, @i);
      .generate-margins(@breakpoint);
    }

  }

  //////////////////////

}

& when not (@classes--padding = false) {

  //////////////////////
  // padding
  //////////////////////

  @padding--arr: none, y, x, t, b, l, r;

  // layout

  .p-y-layout {
    .padding(y, layout) !important;
  }
  .p-x-layout {
    .padding(x, layout) !important;
  }
  .p-top-layout {
    .padding(top, layout) !important;
  }
  .p-bottom-layout {
    .padding(bottom, layout) !important;
  }
  .p-left-layout {
    .padding(left, layout) !important;
  }
  .p-right-layout {
    .padding(right, layout) !important;
  }

  // generate-padding

  .generate-paddings();
  .generate-paddings(@breakpoint:none) {
    & when (@breakpoint = none) {
      .generate-padding(@breakpoint);
    }
    & when not (@breakpoint = none) {
      @query-min: 'min-@{breakpoint}';
      @media @@query-min {
        .generate-padding(@breakpoint);
      }
    }
  }
  .generate-padding(@breakpoint:none, @i:length(@padding--arr)) when (@i > 0) {
    .generate-padding(@breakpoint, @i - 1);
    @pos: extract(@padding--arr, @i);
    .generate-padding-loop(@pos, @breakpoint);
  }
  .generate-padding-loop(@pos, @breakpoint, @i:length(@paddings)) when (@i > 0) {
    .generate-padding-loop(@pos, @breakpoint, @i - 1);
    @padding: extract(@paddings, @i);
    @name: extract(@padding, 1);
    @size: extract(@padding, 2);
    & when (@breakpoint = none) {
      & when (@pos = none) {
        .p--@{name} {
          .padding(@pos, @name, @breakpoint) !important;
        }
      }
      & when not (@pos = none) {
        .p@{pos}--@{name} {
          .padding(@pos, @name, @breakpoint) !important;
        }
      }
    }
    & when not (@breakpoint = none) {
      & when (@pos = none) {
        .p--@{name}-@{breakpoint} {
          .padding(@pos, @name) !important;
        }
      }
      & when not (@pos = none) {
        .p@{pos}--@{name}-@{breakpoint} {
          .padding(@pos, @name) !important;
        }
      }
    }
  }

  // generate-padding-responsive

  & when not (@classes--padding = true) {

    .generate-padding-responsive();
    .generate-padding-responsive(@i:length(@classes--padding)) when (@i > 0) {
      .generate-padding-responsive(@i - 1);
      @breakpoint: extract(@classes--padding, @i);
      .generate-paddings(@breakpoint);
    }

  }

  //////////////////////

}
