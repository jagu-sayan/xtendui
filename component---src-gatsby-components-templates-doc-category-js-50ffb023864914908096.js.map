{"version":3,"sources":["webpack:///./src/gatsby/components/templates/doc-category.js"],"names":["renderAst","RehypeReact","createElement","React","components","demo","Demo","demovanilla","DemoVanilla","Compiler","Template","Component","render","data","this","props","seo","title","post","frontmatter","split","map","item","charAt","toUpperCase","slice","toLowerCase","join","parent","category","type","description","markdownSlug","page","htmlAst","className","categories","sort","typeSort","i","key","pop","posts","z","link","href","target","rel","to","query"],"mappings":"4FAAA,uNAYA,MAAMA,EAAY,IAAIC,IAAY,CAChCC,cAAeC,IAAMD,cACrBE,WAAY,CAAEC,KAAMC,IAAMC,YAAaC,OACtCC,SAEY,MAAMC,UAAiBP,IAAMQ,UAC1CC,SACE,MAAM,KAAEC,GAASC,KAAKC,MAChBC,EAAM,GAoBZ,OAnBAA,EAAIC,MAAQJ,EAAKK,KAAKC,YAAYF,MAClCD,EAAIC,MAAQD,EAAIC,MACbG,MAAM,UACNC,IAAIC,GAAQA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAGC,eACzDC,KAAK,KACRX,EAAIC,OACFJ,EAAKK,KAAKC,YAAYS,QAAUf,EAAKK,KAAKC,YAAYS,SAAWf,EAAKK,KAAKC,YAAYF,MACnFJ,EAAKK,KAAKC,YAAYS,OACtB,GACNZ,EAAIC,OACFJ,EAAKK,KAAKC,YAAYU,UAAYhB,EAAKK,KAAKC,YAAYU,WAAahB,EAAKK,KAAKC,YAAYF,MACvFJ,EAAKK,KAAKC,YAAYU,SACtB,GACNb,EAAIC,OACFJ,EAAKK,KAAKC,YAAYW,MAAQjB,EAAKK,KAAKC,YAAYW,OAASjB,EAAKK,KAAKC,YAAYF,MAC/EJ,EAAKK,KAAKC,YAAYW,KACtB,GACNd,EAAIe,YAAclB,EAAKK,KAAKC,YAAYY,YACxCf,EAAIC,MAAoC,kBAA5Be,YAAanB,EAAKK,MAA4BF,EAAIe,YAAcf,EAAIC,MAE9E,kBAAC,IAAD,CAAQgB,KAAMpB,GACZ,kBAAC,IAAD,CAAKI,MAAOD,EAAIC,MAAOc,YAAaf,EAAIe,cACjB,gBAAtBlB,EAAKK,KAAKgB,QAA4BlC,EAAUa,EAAKK,KAAKgB,SAAW,KACtE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,aACZtB,EAAKuB,WAAWP,SAASQ,KAAKC,KAAUjB,IAAI,CAACQ,EAAUU,IACtD,yBAAKJ,UAAU,uBAAuBK,IAAKD,GACzC,wBAAIJ,UAAU,oEACXN,EAASZ,MAAMG,MAAM,KAAKqB,OAE7B,yBAAKN,UAAU,wBACb,yBAAKA,UAAU,mBACZN,EAASa,MAAMrB,IAAI,EAAGH,QAAQyB,IAC7BzB,EAAKC,YAAYyB,KACf,yBAAKT,UAAU,wBAAwBK,IAAKG,GAC1C,uBACEE,KAAM3B,EAAKC,YAAYyB,KACvBE,OAAO,SACPC,IAAI,sBACJZ,UAAU,4BAEV,yBAAKA,UAAU,MACZjB,EAAKC,YAAYF,MACfG,MAAM,UACNC,IAAIC,GAAQA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAGC,eACzDC,KAAK,MAEV,2BAAIT,EAAKC,YAAYY,eAGvBb,EAAKC,YAAYS,SAAWV,EAAKC,YAAYF,MAC/C,yBAAKkB,UAAU,wBAAwBK,IAAKG,GAC1C,kBAAC,OAAD,CAAMK,GAAIhB,YAAad,GAAOiB,UAAU,4BACtC,yBAAKA,UAAU,MACZjB,EAAKC,YAAYF,MACfG,MAAM,UACNC,IAAIC,GAAQA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAGC,eACzDC,KAAK,MAEV,2BAAIT,EAAKC,YAAYY,aACpBb,EAAKC,YAAYyB,OAGpB,cAanB,MAAMK,EAAK","file":"component---src-gatsby-components-templates-doc-category-js-50ffb023864914908096.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\nimport RehypeReact from 'rehype-react'\nimport { markdownSlug } from 'components/snippets/markdown-slug'\nimport { typeSort } from 'components/snippets/type-sort'\n\nimport SEO from 'components/seo'\nimport Layout from 'components/layout'\nimport Demo from 'components/demo/demo'\nimport DemoVanilla from 'components/demo/demo-vanilla'\n\nconst renderAst = new RehypeReact({\n  createElement: React.createElement,\n  components: { demo: Demo, demovanilla: DemoVanilla },\n}).Compiler\n\nexport default class Template extends React.Component {\n  render() {\n    const { data } = this.props\n    const seo = {}\n    seo.title = data.post.frontmatter.title\n    seo.title = seo.title\n      .split(/[\\s-]+/)\n      .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n      .join(' ')\n    seo.title +=\n      data.post.frontmatter.parent && data.post.frontmatter.parent !== data.post.frontmatter.title\n        ? data.post.frontmatter.parent\n        : ''\n    seo.title +=\n      data.post.frontmatter.category && data.post.frontmatter.category !== data.post.frontmatter.title\n        ? data.post.frontmatter.category\n        : ''\n    seo.title +=\n      data.post.frontmatter.type && data.post.frontmatter.type !== data.post.frontmatter.title\n        ? data.post.frontmatter.type\n        : ''\n    seo.description = data.post.frontmatter.description\n    seo.title = markdownSlug(data.post) === '/introduction' ? seo.description : seo.title // @DOCINDEX\n    return (\n      <Layout page={data}>\n        <SEO title={seo.title} description={seo.description} />\n        {data.post.htmlAst !== '<div></div>' ? renderAst(data.post.htmlAst) : null}\n        <div className=\"gatsby_listing\">\n          <div className=\"row row-6\">\n            {data.categories.category.sort(typeSort).map((category, i) => (\n              <div className=\"gatsby_listing-group\" key={i}>\n                <h2 className=\"h6 my-6 mt-fc mb-lc py-4 px-6 rounded-md bg-gray-200 text-center\">\n                  {category.title.split('-').pop()}\n                </h2>\n                <div className=\"gatsby_listing-items\">\n                  <div className=\"row row-stretch\">\n                    {category.posts.map(({ post }, z) =>\n                      post.frontmatter.link ? (\n                        <div className=\"gatsby_listing-column\" key={z}>\n                          <a\n                            href={post.frontmatter.link}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"card gatsby_listing-item\"\n                          >\n                            <div className=\"h4\">\n                              {post.frontmatter.title\n                                .split(/[\\s-]+/)\n                                .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                .join(' ')}\n                            </div>\n                            <p>{post.frontmatter.description}</p>\n                          </a>\n                        </div>\n                      ) : post.frontmatter.parent === post.frontmatter.title ? (\n                        <div className=\"gatsby_listing-column\" key={z}>\n                          <Link to={markdownSlug(post)} className=\"card gatsby_listing-item\">\n                            <div className=\"h4\">\n                              {post.frontmatter.title\n                                .split(/[\\s-]+/)\n                                .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                .join(' ')}\n                            </div>\n                            <p>{post.frontmatter.description}</p>\n                            {post.frontmatter.link}\n                          </Link>\n                        </div>\n                      ) : null\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport const query = graphql`\n  query($title: String!, $type: String, $category: String, $parent: String, $parents: String) {\n    menus: allMarkdownRemark(\n      filter: { frontmatter: { menu: { eq: true } } }\n      sort: { fields: [frontmatter___date, frontmatter___title], order: [DESC, ASC] }\n    ) {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            title\n            description\n          }\n        }\n      }\n    }\n    categories: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type } } }\n      sort: { fields: [frontmatter___date, frontmatter___title], order: [DESC, ASC] }\n    ) {\n      category: group(field: frontmatter___category) {\n        title: fieldValue\n        posts: edges {\n          post: node {\n            frontmatter {\n              type\n              category\n              parent\n              title\n              description\n              link\n            }\n          }\n        }\n      }\n    }\n    postsAll: allMarkdownRemark {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n            description\n          }\n        }\n      }\n    }\n    postsAdiacent: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type }, parent: { regex: $parents } } }\n      sort: { fields: [frontmatter___date, frontmatter___title], order: [DESC, ASC] }\n    ) {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n          }\n        }\n      }\n    }\n    parent: markdownRemark(frontmatter: { title: { eq: $parent }, category: { eq: $category } }) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        title\n      }\n    }\n    post: markdownRemark(\n      frontmatter: { type: { eq: $type }, category: { eq: $category }, parent: { eq: $parent }, title: { eq: $title } }\n    ) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        title\n        description\n      }\n    }\n  }\n`\n\nTemplate.propTypes = {\n  data: PropTypes.shape({\n    menus: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }),\n          }),\n        })\n      ),\n    }),\n    categories: PropTypes.shape({\n      category: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          posts: PropTypes.arrayOf(\n            PropTypes.shape({\n              post: PropTypes.shape({\n                frontmatter: PropTypes.shape({\n                  type: PropTypes.string.isRequired,\n                  category: PropTypes.string,\n                  parent: PropTypes.string,\n                  title: PropTypes.string.isRequired,\n                  description: PropTypes.string,\n                }),\n              }),\n            })\n          ),\n        })\n      ),\n    }),\n    postsAll: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              category: PropTypes.string,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }),\n          }),\n        })\n      ),\n    }),\n    postsAdiacent: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n            }),\n          }),\n        })\n      ),\n    }),\n    parent: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n      }),\n    }),\n    post: PropTypes.shape({\n      htmlAst: PropTypes.object.isRequired,\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n      }),\n    }),\n  }),\n}\n"],"sourceRoot":""}