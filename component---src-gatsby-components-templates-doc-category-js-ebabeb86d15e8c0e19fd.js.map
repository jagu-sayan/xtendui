{"version":3,"sources":["webpack:///./src/gatsby/components/templates/doc-category.js"],"names":["Template","render","data","this","props","seo","title","post","frontmatter","category","description","page","className","categories","sort","a","b","map","i","key","split","pop","posts","z","link","href","target","rel","item","charAt","toUpperCase","slice","toLowerCase","join","parent","to","markdownSlug","React","Component","query"],"mappings":"0OAQMA,E,gLACJC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KACFG,EAAM,GAIZ,OAHAA,EAAIC,MAAQJ,EAAKK,KAAKC,YAAYF,MAClCD,EAAIC,OAASJ,EAAKK,KAAKC,YAAYC,SAAW,MAAQP,EAAKK,KAAKC,YAAYC,SAAW,GACvFJ,EAAIK,YAAcR,EAAKK,KAAKC,YAAYE,YAEtC,kBAAC,IAAD,CAAQL,IAAKA,EAAKM,KAAMT,GACtB,kBAAC,IAAD,CAAKI,MAAOD,EAAIC,QAChB,yBAAKM,UAAU,kBACb,yBAAKA,UAAU,OACZV,EAAKW,WAAWJ,SACdK,MAAK,SAACC,EAAGC,GACR,MAAgB,WAAZD,EAAET,OAAkC,iBAAZS,EAAET,MAErB,EAEO,SAAZS,EAAET,OAAgC,YAAZS,EAAET,OAAmC,WAAZU,EAAEV,OAAkC,iBAAZU,EAAEV,OAEnE,EAGH,KAERW,KAAI,SAACR,EAAUS,GAAX,OACH,yBAAKN,UAAU,uBAAuBO,IAAKD,GACzC,wBAAIN,UAAU,wBAAwBH,EAASH,MAAMc,MAAM,KAAKC,OAChE,yBAAKT,UAAU,wBACb,yBAAKA,UAAU,OACZH,EAASa,MAAML,KAAI,WAAWM,GAAX,IAAGhB,EAAH,EAAGA,KAAH,OAClBA,EAAKC,YAAYgB,KACf,yBAAKZ,UAAU,wBAAwBO,IAAKI,GAC1C,uBACEE,KAAMlB,EAAKC,YAAYgB,KACvBE,OAAO,SACPC,IAAI,WACJf,UAAU,4EAEV,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,cACZL,EAAKC,YAAYF,MACfc,MAAM,UACNH,KAAI,SAAAW,GAAI,OAAIA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAGC,iBACzDC,KAAK,MAEV,2BAAI1B,EAAKC,YAAYE,kBAM7BH,EAAKC,YAAY0B,SAAW3B,EAAKC,YAAYF,MAC/C,yBAAKM,UAAU,wBAAwBO,IAAKI,GAC1C,kBAAC,OAAD,CAAMY,GAAIC,YAAa7B,GAAOK,UAAU,4EACtC,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,cACZL,EAAKC,YAAYF,MACfc,MAAM,UACNH,KAAI,SAAAW,GAAI,OAAIA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAGC,iBACzDC,KAAK,MAEV,2BAAI1B,EAAKC,YAAYE,aACpBH,EAAKC,YAAYgB,UAM1B,kB,GA3ELa,IAAMC,WAwFdtC,YAER,IAAMuC,EAAK","file":"component---src-gatsby-components-templates-doc-category-js-ebabeb86d15e8c0e19fd.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\nimport { markdownSlug } from 'components/snippets/markdown-slug.js'\n\nimport SEO from 'components/seo'\nimport Layout from 'components/layout'\n\nclass Template extends React.Component {\n  render() {\n    const { data } = this.props\n    const seo = {}\n    seo.title = data.post.frontmatter.title\n    seo.title += data.post.frontmatter.category ? ' â€” ' + data.post.frontmatter.category : ''\n    seo.description = data.post.frontmatter.description\n    return (\n      <Layout seo={seo} page={data}>\n        <SEO title={seo.title} />\n        <div className=\"gatsby_listing\">\n          <div className=\"row\">\n            {data.categories.category\n              .sort((a, b) => {\n                if (a.title === 'Addons' || a.title === 'By Component') {\n                  // a is less than b by some ordering criterion\n                  return 1\n                }\n                if (a.title === 'Core' || a.title === 'By Type' || b.title === 'Addons' || b.title === 'By Component') {\n                  // a is greater than b by the ordering criterion\n                  return -1\n                }\n                // a must be equal to b\n                return 0\n              })\n              .map((category, i) => (\n                <div className=\"gatsby_listing_group\" key={i}>\n                  <h2 className=\"gatsby_listing_title\">{category.title.split('-').pop()}</h2>\n                  <div className=\"gatsby_listing_items\">\n                    <div className=\"row\">\n                      {category.posts.map(({ post }, z) =>\n                        post.frontmatter.link ? (\n                          <div className=\"gatsby_listing_column\" key={z}>\n                            <a\n                              href={post.frontmatter.link}\n                              target=\"_blank\"\n                              rel=\"noopener\"\n                              className=\"card card-primary card-small card-full card-collapse gatsby_listing_item\"\n                            >\n                              <div className=\"card-design\"></div>\n                              <div className=\"card-inner\">\n                                <div className=\"card-content\">\n                                  <div className=\"card-block card-item\">\n                                    <div className=\"card-title\">\n                                      {post.frontmatter.title\n                                        .split(/[\\s-]+/)\n                                        .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                        .join(' ')}\n                                    </div>\n                                    <p>{post.frontmatter.description}</p>\n                                  </div>\n                                </div>\n                              </div>\n                            </a>\n                          </div>\n                        ) : post.frontmatter.parent === post.frontmatter.title ? (\n                          <div className=\"gatsby_listing_column\" key={z}>\n                            <Link to={markdownSlug(post)} className=\"card card-primary card-small card-full card-collapse gatsby_listing_item\">\n                              <div className=\"card-design\"></div>\n                              <div className=\"card-inner\">\n                                <div className=\"card-content\">\n                                  <div className=\"card-block card-item\">\n                                    <div className=\"card-title\">\n                                      {post.frontmatter.title\n                                        .split(/[\\s-]+/)\n                                        .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                        .join(' ')}\n                                    </div>\n                                    <p>{post.frontmatter.description}</p>\n                                    {post.frontmatter.link}\n                                  </div>\n                                </div>\n                              </div>\n                            </Link>\n                          </div>\n                        ) : null\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default Template\n\nexport const query = graphql`\n  query($title: String!, $type: String, $category: String, $parent: String, $parents: String) {\n    categories: allMarkdownRemark(filter: { frontmatter: { type: { eq: $type } } }, sort: { fields: [frontmatter___date, frontmatter___title], order: ASC }) {\n      category: group(field: frontmatter___category) {\n        title: fieldValue\n        posts: edges {\n          post: node {\n            frontmatter {\n              type\n              category\n              parent\n              title\n              description\n              link\n            }\n          }\n        }\n      }\n    }\n    postsAll: allMarkdownRemark {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n            description\n          }\n        }\n      }\n    }\n    postsAdiacent: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type }, parent: { regex: $parents } } }\n      sort: { fields: [frontmatter___date, frontmatter___title], order: [DESC, ASC] }\n    ) {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n          }\n        }\n      }\n    }\n    parent: markdownRemark(frontmatter: { title: { eq: $parent }, category: { eq: $category } }) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        title\n      }\n    }\n    post: markdownRemark(frontmatter: { type: { eq: $type }, category: { eq: $category }, parent: { eq: $parent }, title: { eq: $title } }) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        title\n        description\n      }\n    }\n  }\n`\n\nTemplate.propTypes = {\n  data: PropTypes.shape({\n    categories: PropTypes.shape({\n      group: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          posts: PropTypes.arrayOf(\n            PropTypes.shape({\n              post: PropTypes.shape({\n                frontmatter: PropTypes.shape({\n                  type: PropTypes.string.isRequired,\n                  category: PropTypes.string,\n                  parent: PropTypes.string,\n                  title: PropTypes.string.isRequired,\n                  description: PropTypes.string.isRequired,\n                }).isRequired,\n              }).isRequired,\n            }).isRequired\n          ),\n        }).isRequired\n      ),\n    }),\n    postsAll: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              category: PropTypes.string,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ),\n    }).isRequired,\n    postsAdiacent: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ),\n    }).isRequired,\n    parent: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n      }).isRequired,\n    }),\n    post: PropTypes.shape({\n      htmlAst: PropTypes.object.isRequired,\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n}\n"],"sourceRoot":""}