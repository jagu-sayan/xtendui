{"version":3,"sources":["webpack:///./src/gatsby/components/includes/doc-video.js","webpack:///./src/gatsby/components/includes/doc-page.js","webpack:///./src/gatsby/components/templates/doc-page.js"],"names":["DocVideo","render","adiacent","this","props","query","data","media","items","map","assets","z","item","title","frontmatter","className","key","preload","muted","playsInline","loop","autoPlay","type","src","file","url","React","Component","renderAst","RehypeReact","createElement","components","demo","Demo","demovanilla","DemoVanilla","Compiler","DocPage","post","htmlAst","parent","postsAdiacent","posts","length","category","i","demos","role","data-gatsby-listing-toggle","split","charAt","toUpperCase","slice","toLowerCase","join","data-iframe-fullscreen","to","markdownSlug","description","Template","seo","docTitle","page"],"mappings":"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","file":"component---src-gatsby-components-templates-doc-page-js-c8cc6974795a03ddde68.js","sourcesContent":["import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport PropTypes from 'prop-types'\n\nexport default class DocVideo extends React.Component {\n  render() {\n    const { adiacent } = this.props\n    return (\n      <StaticQuery\n        query={graphql`\n          query {\n            media: allContentfulAsset {\n              items: edges {\n                item: node {\n                  title\n                  file {\n                    url\n                  }\n                }\n              }\n            }\n          }\n        `}\n        render={data =>\n          data.media.items.map((assets, z) => {\n            if (assets.item.title === adiacent.frontmatter.title) {\n              return (\n                <div className=\"media-container\" key={z}>\n                  <div className=\"media-inner\">\n                    <video className=\"media object-cover object-center\" preload=\"metadata\" muted playsInline loop autoPlay>\n                      <source type=\"video/mp4\" src={assets.item.file.url ? assets.item.file.url : null} />\n                    </video>\n                  </div>\n                </div>\n              )\n            }\n          })\n        }\n      />\n    )\n  }\n}\n\nDocVideo.propTypes = {\n  data: PropTypes.shape({\n    media: PropTypes.shape({\n      items: PropTypes.arrayOf(\n        PropTypes.shape({\n          item: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            file: PropTypes.shape({\n              url: PropTypes.string.isRequired,\n            }),\n          }),\n        })\n      ),\n    }),\n  }),\n  adiacent: PropTypes.shape({\n    frontmatter: PropTypes.shape({\n      type: PropTypes.string.isRequired,\n      category: PropTypes.string,\n      parent: PropTypes.string,\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      demos: PropTypes.array,\n    }),\n  }),\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport RehypeReact from 'rehype-react'\n\nimport { markdownSlug } from 'components/snippets/markdown-slug'\nimport Demo from 'components/demo/demo'\nimport DemoVanilla from 'components/demo/demo-vanilla'\nimport DocVideo from 'components/includes/doc-video'\n\nconst renderAst = new RehypeReact({\n  createElement: React.createElement,\n  components: { demo: Demo, demovanilla: DemoVanilla },\n}).Compiler\n\nexport default class DocPage extends React.Component {\n  render() {\n    const { data } = this.props\n    return (\n      <div>\n        {data.post.htmlAst !== '<div></div>' ? renderAst(data.post.htmlAst) : null}\n        {data.post.frontmatter.parent === data.post.frontmatter.title ? (\n          data.postsAdiacent.posts.length > 1 ? (\n            <div className=\"gatsby_listing\">\n              <div className=\"row row-3\">\n                <div className=\"gatsby_listing-group\">\n                  {data.post.frontmatter.category === 'Core' ? (\n                    <h2 className=\"h5 h-block rounded-md text-black links-default bg-gray-200 text-center\">{'Customization and interactions'}</h2>\n                  ) : null}\n                  <div className=\"gatsby_listing-items\">\n                    <div className=\"row row-stretch\">\n                      {data.postsAdiacent.posts.map(({ post: adiacent }, i) =>\n                        adiacent.frontmatter.parent !== adiacent.frontmatter.title ? (\n                          adiacent.frontmatter.demos ? (\n                            <div className=\"gatsby_listing-column\" key={i}>\n                              <a role=\"button\" className=\"card gatsby_listing-item gatsby_listing-item--themes\" data-gatsby-listing-toggle>\n                                <div>\n                                  <div className=\"h4\">\n                                    {adiacent.frontmatter.title\n                                      .split(/[\\s-]+/)\n                                      .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                      .join(' ')}\n                                  </div>\n                                  {process.env.CONTENTFUL_SPACE ? <DocVideo adiacent={adiacent} /> : ''}\n                                </div>\n                              </a>\n                              {adiacent.frontmatter.demos ? (\n                                <Demo>\n                                  {adiacent.frontmatter.demos.map((demo, i) => {\n                                    const type = demo.split('/')[0]\n                                    if (type === 'vanilla') {\n                                      return <DemoVanilla src={demo} key={i}></DemoVanilla>\n                                    } else if (type === 'iframe') {\n                                      return <div className=\"gatsby_demo_item toggle\" data-iframe-fullscreen={demo} key={i}></div>\n                                    }\n                                  })}\n                                </Demo>\n                              ) : null}\n                            </div>\n                          ) : (\n                            <div className=\"gatsby_listing-column\" key={i}>\n                              <Link to={markdownSlug(adiacent)} className=\"card gatsby_listing-item\">\n                                <div className=\"h4\">\n                                  {adiacent.frontmatter.title\n                                    .split(/[\\s-]+/)\n                                    .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                    .join(' ')}\n                                </div>\n                                <p>\n                                  {adiacent.frontmatter.description\n                                    ? adiacent.frontmatter.description\n                                    : `${adiacent.frontmatter.parent}'s ${adiacent.frontmatter.title\n                                        .split(/[\\s-]+/)\n                                        .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                        .join(' ')}`}\n                                </p>\n                              </Link>\n                            </div>\n                          )\n                        ) : null\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : null\n        ) : null}\n      </div>\n    )\n  }\n}\n\nDocPage.propTypes = {\n  data: PropTypes.shape({\n    menus: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }),\n          }),\n        })\n      ),\n    }),\n    categories: PropTypes.shape({\n      category: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          posts: PropTypes.arrayOf(\n            PropTypes.shape({\n              post: PropTypes.shape({\n                frontmatter: PropTypes.shape({\n                  type: PropTypes.string.isRequired,\n                  category: PropTypes.string,\n                  parent: PropTypes.string,\n                  title: PropTypes.string.isRequired,\n                  description: PropTypes.string,\n                }),\n              }),\n            })\n          ),\n        })\n      ),\n    }),\n    postsAll: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              category: PropTypes.string,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }),\n          }),\n        })\n      ),\n    }),\n    postsAdiacent: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              category: PropTypes.string,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n              demos: PropTypes.array,\n            }),\n          }),\n        })\n      ),\n    }),\n    parent: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n      }),\n    }),\n    post: PropTypes.shape({\n      htmlAst: PropTypes.object.isRequired,\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n      }),\n    }),\n  }),\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport SEO from 'components/seo'\nimport Layout from 'components/layout'\nimport DocPage from 'components/includes/doc-page'\nimport { docTitle } from 'components/snippets/doc-title'\n\nexport default class Template extends React.Component {\n  render() {\n    const { data } = this.props\n    const seo = {}\n    seo.title = docTitle(data)\n    seo.description = data.post.frontmatter.description ? data.post.frontmatter.description : data.parent.frontmatter.description\n    return (\n      <Layout page={data}>\n        <SEO title={seo.title} description={seo.description} />\n        <DocPage data={data}></DocPage>\n      </Layout>\n    )\n  }\n}\n\nexport const query = graphql`\n  query($title: String!, $type: String, $category: String, $parent: String, $parents: String) {\n    menus: allMarkdownRemark(filter: { frontmatter: { menu: { eq: true } } }, sort: { fields: [frontmatter___date, frontmatter___title], order: [DESC, ASC] }) {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            title\n            description\n          }\n        }\n      }\n    }\n    categories: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type } } }\n      sort: { fields: [frontmatter___date, frontmatter___title], order: [DESC, ASC] }\n    ) {\n      category: group(field: frontmatter___category) {\n        title: fieldValue\n        posts: edges {\n          post: node {\n            frontmatter {\n              type\n              category\n              parent\n              title\n              description\n              link\n            }\n          }\n        }\n      }\n    }\n    postsAll: allMarkdownRemark {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n            description\n          }\n        }\n      }\n    }\n    postsAdiacent: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type }, category: { eq: $category }, parent: { regex: $parents } } }\n      sort: { fields: [frontmatter___date, frontmatter___title], order: [DESC, ASC] }\n    ) {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n            description\n            demos\n          }\n        }\n      }\n    }\n    parent: markdownRemark(frontmatter: { title: { eq: $parent }, category: { eq: $category } }) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        description\n        title\n      }\n    }\n    post: markdownRemark(frontmatter: { type: { eq: $type }, parent: { eq: $parent }, category: { eq: $category }, title: { eq: $title } }) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        title\n        description\n      }\n    }\n  }\n`\n\nTemplate.propTypes = {\n  data: PropTypes.shape({\n    menus: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }),\n          }),\n        })\n      ),\n    }),\n    categories: PropTypes.shape({\n      category: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          posts: PropTypes.arrayOf(\n            PropTypes.shape({\n              post: PropTypes.shape({\n                frontmatter: PropTypes.shape({\n                  type: PropTypes.string.isRequired,\n                  category: PropTypes.string,\n                  parent: PropTypes.string,\n                  title: PropTypes.string.isRequired,\n                  description: PropTypes.string,\n                }),\n              }),\n            })\n          ),\n        })\n      ),\n    }),\n    postsAll: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              category: PropTypes.string,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }),\n          }),\n        })\n      ),\n    }),\n    postsAdiacent: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              category: PropTypes.string,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n              demos: PropTypes.array,\n            }),\n          }),\n        })\n      ),\n    }),\n    parent: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n      }),\n    }),\n    post: PropTypes.shape({\n      htmlAst: PropTypes.object.isRequired,\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n      }),\n    }),\n  }),\n}\n"],"sourceRoot":""}