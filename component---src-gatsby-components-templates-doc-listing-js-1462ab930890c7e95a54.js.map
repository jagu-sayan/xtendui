{"version":3,"sources":["webpack:///./src/gatsby/components/templates/doc-listing.js"],"names":["Template","render","data","this","props","seo","title","post","frontmatter","description","page","className","categories","category","map","i","key","split","pop","posts","z","link","href","target","rel","item","index","charAt","toUpperCase","slice","toLowerCase","join","parent","to","markdownSlug","React","Component","query"],"mappings":"8NAQMA,E,kGACJC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KACFG,EAAM,GAGZ,OAFAA,EAAIC,MAAQJ,EAAKK,KAAKC,YAAYF,MAClCD,EAAII,YAAcP,EAAKK,KAAKC,YAAYC,YAEtC,kBAAC,IAAD,CAAQJ,IAAKA,EAAKK,KAAMR,GACtB,kBAAC,IAAD,CAAKI,MAAOD,EAAIC,MAAQ,MAAQD,EAAII,cACpC,yBAAKE,UAAU,kBACb,yBAAKA,UAAU,OACZT,EAAKU,WAAWC,SAASC,KAAI,SAACD,EAAUE,GAAX,OAC5B,yBAAKJ,UAAU,uBAAuBK,IAAKD,GACzC,wBAAIJ,UAAU,wBAAwBE,EAASP,MAAMW,MAAM,KAAKC,OAChE,yBAAKP,UAAU,wBACb,yBAAKA,UAAU,OACZE,EAASM,MAAML,KAAI,WAAWM,GAAX,IAAGb,EAAH,EAAGA,KAAH,OAClBA,EAAKC,YAAYa,KACf,yBAAKV,UAAU,wBAAwBK,IAAKI,GAC1C,uBACEE,KAAMf,EAAKC,YAAYa,KACvBE,OAAO,SACPC,IAAI,WACJb,UAAU,4EAEV,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,cACZJ,EAAKC,YAAYF,MACfW,MAAM,KACNH,KAAI,SAACW,EAAMC,GAAP,OAAkBA,EAAQD,EAAKE,OAAO,GAAGC,cAAgBH,EAAKI,MAAM,GAAGC,cAAgBL,KAC3FM,KAAK,MAEV,2BAAIxB,EAAKC,YAAYC,kBAM7BF,EAAKC,YAAYwB,SAAWzB,EAAKC,YAAYF,MAC/C,yBAAKK,UAAU,wBAAwBK,IAAKI,GAC1C,kBAAC,OAAD,CAAMa,GAAIC,YAAa3B,GAAOI,UAAU,4EACtC,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,cACZJ,EAAKC,YAAYF,MACfW,MAAM,KACNH,KAAI,SAACW,EAAMC,GAAP,OAAkBA,EAAQD,EAAKE,OAAO,GAAGC,cAAgBH,EAAKI,MAAM,GAAGC,cAAgBL,KAC3FM,KAAK,MAEV,2BAAIxB,EAAKC,YAAYC,aACpBF,EAAKC,YAAYa,UAM1B,kB,GA7DHc,IAAMC,WA0EdpC,YAER,IAAMqC,EAAK","file":"component---src-gatsby-components-templates-doc-listing-js-1462ab930890c7e95a54.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\nimport { markdownSlug } from 'components/snippets/markdown-slug.js'\n\nimport SEO from 'components/seo'\nimport Layout from 'components/layout'\n\nclass Template extends React.Component {\n  render() {\n    const { data } = this.props\n    const seo = {}\n    seo.title = data.post.frontmatter.title\n    seo.description = data.post.frontmatter.description\n    return (\n      <Layout seo={seo} page={data}>\n        <SEO title={seo.title + ' â€” ' + seo.description} />\n        <div className=\"gatsby_listing\">\n          <div className=\"row\">\n            {data.categories.category.map((category, i) => (\n              <div className=\"gatsby_listing_group\" key={i}>\n                <h2 className=\"gatsby_listing_title\">{category.title.split('-').pop()}</h2>\n                <div className=\"gatsby_listing_items\">\n                  <div className=\"row\">\n                    {category.posts.map(({ post }, z) =>\n                      post.frontmatter.link ? (\n                        <div className=\"gatsby_listing_column\" key={z}>\n                          <a\n                            href={post.frontmatter.link}\n                            target=\"_blank\"\n                            rel=\"noopener\"\n                            className=\"card card-primary card-small card-full card-collapse gatsby_listing_item\"\n                          >\n                            <div className=\"card-design\"></div>\n                            <div className=\"card-inner\">\n                              <div className=\"card-content\">\n                                <div className=\"card-block card-item\">\n                                  <div className=\"card-title\">\n                                    {post.frontmatter.title\n                                      .split('-')\n                                      .map((item, index) => (index ? item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() : item))\n                                      .join(' ')}\n                                  </div>\n                                  <p>{post.frontmatter.description}</p>\n                                </div>\n                              </div>\n                            </div>\n                          </a>\n                        </div>\n                      ) : post.frontmatter.parent === post.frontmatter.title ? (\n                        <div className=\"gatsby_listing_column\" key={z}>\n                          <Link to={markdownSlug(post)} className=\"card card-primary card-small card-full card-collapse gatsby_listing_item\">\n                            <div className=\"card-design\"></div>\n                            <div className=\"card-inner\">\n                              <div className=\"card-content\">\n                                <div className=\"card-block card-item\">\n                                  <div className=\"card-title\">\n                                    {post.frontmatter.title\n                                      .split('-')\n                                      .map((item, index) => (index ? item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() : item))\n                                      .join(' ')}\n                                  </div>\n                                  <p>{post.frontmatter.description}</p>\n                                  {post.frontmatter.link}\n                                </div>\n                              </div>\n                            </div>\n                          </Link>\n                        </div>\n                      ) : null\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default Template\n\nexport const query = graphql`\n  query($title: String!, $type: String, $parent: String, $parents: String) {\n    categories: allMarkdownRemark(filter: { frontmatter: { type: { eq: $type } } }, sort: { fields: [frontmatter___date, frontmatter___title], order: ASC }) {\n      category: group(field: frontmatter___categories) {\n        title: fieldValue\n        posts: edges {\n          post: node {\n            frontmatter {\n              type\n              parent\n              title\n              description\n              link\n            }\n          }\n        }\n      }\n    }\n    postsAll: allMarkdownRemark {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            parent\n            title\n            description\n          }\n        }\n      }\n    }\n    postsAdiacent: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type }, parent: { regex: $parents } } }\n      sort: { fields: [frontmatter___date, frontmatter___title], order: [DESC, ASC] }\n    ) {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            parent\n            title\n          }\n        }\n      }\n    }\n    parent: markdownRemark(frontmatter: { title: { eq: $parent } }) {\n      htmlAst\n      frontmatter {\n        type\n        parent\n        title\n      }\n    }\n    post: markdownRemark(frontmatter: { type: { eq: $type }, parent: { eq: $parent }, title: { eq: $title } }) {\n      htmlAst\n      frontmatter {\n        type\n        parent\n        title\n        description\n        categories\n      }\n    }\n  }\n`\n\nTemplate.propTypes = {\n  data: PropTypes.shape({\n    categories: PropTypes.shape({\n      group: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          posts: PropTypes.arrayOf(\n            PropTypes.shape({\n              post: PropTypes.shape({\n                frontmatter: PropTypes.shape({\n                  type: PropTypes.string.isRequired,\n                  parent: PropTypes.string,\n                  title: PropTypes.string.isRequired,\n                  description: PropTypes.string.isRequired,\n                }).isRequired,\n              }).isRequired,\n            }).isRequired\n          ),\n        }).isRequired\n      ),\n    }),\n    postsAll: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ),\n    }).isRequired,\n    postsAdiacent: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ),\n    }).isRequired,\n    parent: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n      }).isRequired,\n    }),\n    post: PropTypes.shape({\n      htmlAst: PropTypes.object.isRequired,\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n        categories: PropTypes.array,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n}\n"],"sourceRoot":""}