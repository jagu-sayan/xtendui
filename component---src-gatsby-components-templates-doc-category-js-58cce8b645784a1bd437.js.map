{"version":3,"sources":["webpack:///./src/gatsby/components/includes/doc-category.js","webpack:///./src/gatsby/components/templates/doc-category.js"],"names":["renderAst","RehypeReact","createElement","React","components","demo","Demo","demovanilla","DemoVanilla","Compiler","DocCategory","render","data","this","props","post","htmlAst","className","categories","category","sort","typeSort","map","i","key","title","split","pop","posts","z","frontmatter","link","href","target","rel","item","charAt","toUpperCase","slice","toLowerCase","join","description","parent","to","markdownSlug","Component","Template","seo","docTitle","page","query"],"mappings":"+TAUMA,EAAY,IAAIC,IAAY,CAChCC,cAAeC,IAAMD,cACrBE,WAAY,CAAEC,KAAMC,IAAMC,YAAaC,OACtCC,SAEkBC,E,kGACnBC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KACR,OACE,6BACyB,gBAAtBA,EAAKG,KAAKC,QAA4BhB,EAAUY,EAAKG,KAAKC,SAAW,KACtE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,aACZL,EAAKM,WAAWC,SAASC,KAAKC,KAAUC,KAAI,SAACH,EAAUI,GAAX,OAC3C,yBAAKN,UAAU,uBAAuBO,IAAKD,GACzC,wBAAIN,UAAU,iDAAiDE,EAASM,MAAMC,MAAM,KAAKC,OACzF,yBAAKV,UAAU,wBACb,yBAAKA,UAAU,mBACZE,EAASS,MAAMN,KAAI,WAAWO,GAAX,IAAGd,EAAH,EAAGA,KAAH,OAClBA,EAAKe,YAAYC,KACf,yBAAKd,UAAU,wBAAwBO,IAAKK,GAC1C,uBAAGG,KAAMjB,EAAKe,YAAYC,KAAME,OAAO,SAASC,IAAI,aAAajB,UAAU,4BACzE,yBAAKA,UAAU,MACZF,EAAKe,YAAYL,MACfC,MAAM,UACNJ,KAAI,SAAAa,GAAI,OAAIA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAGC,iBACzDC,KAAK,MAEV,2BAAIzB,EAAKe,YAAYW,eAGvB1B,EAAKe,YAAYY,SAAW3B,EAAKe,YAAYL,MAC/C,yBAAKR,UAAU,wBAAwBO,IAAKK,GAC1C,kBAAC,OAAD,CAAMc,GAAIC,YAAa7B,GAAOE,UAAU,4BACtC,yBAAKA,UAAU,MACZF,EAAKe,YAAYL,MACfC,MAAM,UACNJ,KAAI,SAAAa,GAAI,OAAIA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAGC,iBACzDC,KAAK,MAEV,2BAAIzB,EAAKe,YAAYW,aACpB1B,EAAKe,YAAYC,OAGpB,kB,GAvCe5B,IAAM0C,W,YCN1BC,E,kGACnBnC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KACFmC,EAAM,GAGZ,OAFAA,EAAItB,MAAQuB,YAASpC,GACrBmC,EAAIN,YAAc7B,EAAKG,KAAKe,YAAYW,YAEtC,kBAAC,IAAD,CAAQQ,KAAMrC,GACZ,kBAAC,IAAD,CAAKa,MAAOsB,EAAItB,MAAOgB,YAAaM,EAAIN,cACxC,kBAAC,EAAD,CAAa7B,KAAMA,M,GATWT,IAAM0C,WAe/BK,EAAK","file":"component---src-gatsby-components-templates-doc-category-js-58cce8b645784a1bd437.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport RehypeReact from 'rehype-react'\n\nimport { markdownSlug } from 'components/snippets/markdown-slug'\nimport { typeSort } from 'components/snippets/type-sort'\nimport Demo from 'components/demo/demo'\nimport DemoVanilla from 'components/demo/demo-vanilla'\n\nconst renderAst = new RehypeReact({\n  createElement: React.createElement,\n  components: { demo: Demo, demovanilla: DemoVanilla },\n}).Compiler\n\nexport default class DocCategory extends React.Component {\n  render() {\n    const { data } = this.props\n    return (\n      <div>\n        {data.post.htmlAst !== '<div></div>' ? renderAst(data.post.htmlAst) : null}\n        <div className=\"gatsby_listing\">\n          <div className=\"row row-3\">\n            {data.categories.category.sort(typeSort).map((category, i) => (\n              <div className=\"gatsby_listing-group\" key={i}>\n                <h2 className=\"h5 h-block rounded-md bg-gray-200 text-center\">{category.title.split('-').pop()}</h2>\n                <div className=\"gatsby_listing-items\">\n                  <div className=\"row row-stretch\">\n                    {category.posts.map(({ post }, z) =>\n                      post.frontmatter.link ? (\n                        <div className=\"gatsby_listing-column\" key={z}>\n                          <a href={post.frontmatter.link} target=\"_blank\" rel=\"noreferrer\" className=\"card gatsby_listing-item\">\n                            <div className=\"h4\">\n                              {post.frontmatter.title\n                                .split(/[\\s-]+/)\n                                .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                .join(' ')}\n                            </div>\n                            <p>{post.frontmatter.description}</p>\n                          </a>\n                        </div>\n                      ) : post.frontmatter.parent === post.frontmatter.title ? (\n                        <div className=\"gatsby_listing-column\" key={z}>\n                          <Link to={markdownSlug(post)} className=\"card gatsby_listing-item\">\n                            <div className=\"h4\">\n                              {post.frontmatter.title\n                                .split(/[\\s-]+/)\n                                .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                .join(' ')}\n                            </div>\n                            <p>{post.frontmatter.description}</p>\n                            {post.frontmatter.link}\n                          </Link>\n                        </div>\n                      ) : null\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nDocCategory.propTypes = {\n  data: PropTypes.shape({\n    menus: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }),\n          }),\n        })\n      ),\n    }),\n    categories: PropTypes.shape({\n      category: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          posts: PropTypes.arrayOf(\n            PropTypes.shape({\n              post: PropTypes.shape({\n                frontmatter: PropTypes.shape({\n                  type: PropTypes.string.isRequired,\n                  category: PropTypes.string,\n                  parent: PropTypes.string,\n                  title: PropTypes.string.isRequired,\n                  description: PropTypes.string,\n                }),\n              }),\n            })\n          ),\n        })\n      ),\n    }),\n    postsAll: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              category: PropTypes.string,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }),\n          }),\n        })\n      ),\n    }),\n    postsAdiacent: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n            }),\n          }),\n        })\n      ),\n    }),\n    parent: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n      }),\n    }),\n    post: PropTypes.shape({\n      htmlAst: PropTypes.object.isRequired,\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n      }),\n    }),\n  }),\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport SEO from 'components/seo'\nimport Layout from 'components/layout'\nimport DocCategory from 'components/includes/doc-category'\nimport { docTitle } from 'components/snippets/doc-title'\n\nexport default class Template extends React.Component {\n  render() {\n    const { data } = this.props\n    const seo = {}\n    seo.title = docTitle(data)\n    seo.description = data.post.frontmatter.description\n    return (\n      <Layout page={data}>\n        <SEO title={seo.title} description={seo.description} />\n        <DocCategory data={data}></DocCategory>\n      </Layout>\n    )\n  }\n}\n\nexport const query = graphql`\n  query($title: String!, $type: String, $category: String, $parent: String, $parents: String) {\n    menus: allMarkdownRemark(filter: { frontmatter: { menu: { eq: true } } }, sort: { fields: [frontmatter___date, frontmatter___title], order: [DESC, ASC] }) {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            title\n            description\n          }\n        }\n      }\n    }\n    categories: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type } } }\n      sort: { fields: [frontmatter___date, frontmatter___title], order: [DESC, ASC] }\n    ) {\n      category: group(field: frontmatter___category) {\n        title: fieldValue\n        posts: edges {\n          post: node {\n            frontmatter {\n              type\n              category\n              parent\n              title\n              description\n              link\n            }\n          }\n        }\n      }\n    }\n    postsAll: allMarkdownRemark {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n            description\n          }\n        }\n      }\n    }\n    postsAdiacent: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type }, parent: { regex: $parents } } }\n      sort: { fields: [frontmatter___date, frontmatter___title], order: [DESC, ASC] }\n    ) {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n          }\n        }\n      }\n    }\n    parent: markdownRemark(frontmatter: { title: { eq: $parent }, category: { eq: $category } }) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        title\n      }\n    }\n    post: markdownRemark(frontmatter: { type: { eq: $type }, category: { eq: $category }, parent: { eq: $parent }, title: { eq: $title } }) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        title\n        description\n      }\n    }\n  }\n`\n\nTemplate.propTypes = {\n  data: PropTypes.shape({\n    menus: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }),\n          }),\n        })\n      ),\n    }),\n    categories: PropTypes.shape({\n      category: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          posts: PropTypes.arrayOf(\n            PropTypes.shape({\n              post: PropTypes.shape({\n                frontmatter: PropTypes.shape({\n                  type: PropTypes.string.isRequired,\n                  category: PropTypes.string,\n                  parent: PropTypes.string,\n                  title: PropTypes.string.isRequired,\n                  description: PropTypes.string,\n                }),\n              }),\n            })\n          ),\n        })\n      ),\n    }),\n    postsAll: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              category: PropTypes.string,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }),\n          }),\n        })\n      ),\n    }),\n    postsAdiacent: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n            }),\n          }),\n        })\n      ),\n    }),\n    parent: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n      }),\n    }),\n    post: PropTypes.shape({\n      htmlAst: PropTypes.object.isRequired,\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n      }),\n    }),\n  }),\n}\n"],"sourceRoot":""}