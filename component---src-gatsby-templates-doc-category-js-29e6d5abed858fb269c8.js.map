{"version":3,"file":"component---src-gatsby-templates-doc-category-js-29e6d5abed858fb269c8.js","mappings":"iPAWA,MAAMA,EAAUC,EAAAA,OAAAA,EAEVC,EAAY,IAAIC,EAAAA,EAAY,CAChCC,cAAeC,EAAAA,cACfC,WAAY,CAAEC,KAAMC,EAAAA,EAAMC,WAAYC,EAAAA,KACrCC,SA+OH,UA7OA,SAAkBC,GAChB,MAAM,KAAEC,GAASD,EACXE,EAAM,CAAC,EAeb,OAdAA,EAAIC,MAAQF,EAAKG,KAAKC,YAAYF,MAClCD,EAAIC,OACFF,EAAKG,KAAKC,YAAYC,QAAUL,EAAKG,KAAKC,YAAYC,SAAWL,EAAKG,KAAKC,YAAYF,MACnFF,EAAKG,KAAKC,YAAYC,OACtB,GACNJ,EAAIC,OACFF,EAAKG,KAAKC,YAAYE,UAAYN,EAAKG,KAAKC,YAAYE,WAAaN,EAAKG,KAAKC,YAAYF,MACvFF,EAAKG,KAAKC,YAAYE,SACtB,GACNL,EAAIC,OACFF,EAAKG,KAAKC,YAAYG,MAAQP,EAAKG,KAAKC,YAAYG,OAASP,EAAKG,KAAKC,YAAYF,MAC/EF,EAAKG,KAAKC,YAAYG,KACtB,GACNN,EAAIO,YAAcR,EAAKG,KAAKC,YAAYI,YAEtChB,EAAAA,cAACiB,EAAAA,EAAM,CAACC,KAAMV,GACZR,EAAAA,cAACmB,EAAAA,EAAG,CAACT,MAAOD,EAAIC,MAAOM,YAAaP,EAAIO,cACjB,gBAAtBR,EAAKG,KAAKS,QAA4BvB,EAAUW,EAAKG,KAAKS,SAAW,KACtEpB,EAAAA,cAAA,OAAKqB,UAAU,kBACbrB,EAAAA,cAAA,OAAKqB,UAAU,mBACZb,EAAKc,WAAWR,SAASS,KAAKC,EAAAA,GAAUC,KAAI,CAACX,EAAUY,IACtD1B,EAAAA,cAAA,OAAKqB,UAAU,uBAAuBM,IAAKD,GACzC1B,EAAAA,cAAA,MAAIqB,UAAU,sEACXP,EAASJ,MAAMkB,MAAM,KAAKC,OAE7B7B,EAAAA,cAAA,OAAKqB,UAAU,wBACbrB,EAAAA,cAAA,OAAKqB,UAAU,yBACZP,EAASgB,MAAML,KAAI,CAAAM,EAAWC,KAAC,IAAX,KAAErB,GAAMoB,EAAA,OAC3BpB,EAAKC,YAAYC,SAAWF,EAAKC,YAAYF,MAC3CV,EAAAA,cAAA,OACEqB,UAAS,0DAAAY,QACY,oBAAXC,QAA4C,UAAlBA,OAAOC,SACzCxB,EAAKC,YAAYwB,MACjBzB,EAAKC,YAAYwB,KAAKC,SAAS,UAC3B,SACA,IAENV,IAAKK,GACLhC,EAAAA,cAACsC,EAAAA,KAAI,CACHC,IAAIC,EAAAA,EAAAA,cAAa7B,GACjBU,UAAS,+BAAAY,OAAiCtC,EAAQ8C,gBAClDzC,EAAAA,cAAA,OAAKqB,UAAU,8GACZV,EAAKC,YAAYF,OAEpBV,EAAAA,cAAA,KAAGqB,UAAU,wCAAwCV,EAAKC,YAAYI,eAGxE,IAAI,WAU5B,C","sources":["webpack://xtendui/./src/gatsby/templates/doc-category.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\nimport RehypeReact from 'rehype-react'\nimport { markdownSlug } from 'src/gatsby/templates/snippets/markdown-slug'\nimport { typeSort } from 'src/gatsby/templates/snippets/type-sort'\nimport SEO from 'src/gatsby/templates/seo'\nimport Layout from 'src/gatsby/templates/layout'\nimport Demo from 'src/gatsby/templates/demo/demo'\nimport DemoInline from 'src/gatsby/templates/demo/demo-inline'\n\nconst classes = require('src/gatsby/templates/snippets/classes').classes\n\nconst renderAst = new RehypeReact({\n  createElement: React.createElement,\n  components: { demo: Demo, demoinline: DemoInline },\n}).Compiler\n\nfunction Template(props) {\n  const { data } = props\n  const seo = {}\n  seo.title = data.post.frontmatter.title\n  seo.title +=\n    data.post.frontmatter.parent && data.post.frontmatter.parent !== data.post.frontmatter.title\n      ? data.post.frontmatter.parent\n      : ''\n  seo.title +=\n    data.post.frontmatter.category && data.post.frontmatter.category !== data.post.frontmatter.title\n      ? data.post.frontmatter.category\n      : ''\n  seo.title +=\n    data.post.frontmatter.type && data.post.frontmatter.type !== data.post.frontmatter.title\n      ? data.post.frontmatter.type\n      : ''\n  seo.description = data.post.frontmatter.description\n  return (\n    <Layout page={data}>\n      <SEO title={seo.title} description={seo.description} />\n      {data.post.htmlAst !== '<div></div>' ? renderAst(data.post.htmlAst) : null}\n      <div className=\"gatsby_listing\">\n        <div className=\"xt-row xt-row-6\">\n          {data.categories.category.sort(typeSort).map((category, i) => (\n            <div className=\"gatsby_listing-group\" key={i}>\n              <h2 className=\"xt-h6 my-6 xt-my-auto py-4 px-6 rounded-md bg-gray-100 text-center\">\n                {category.title.split('-').pop()}\n              </h2>\n              <div className=\"gatsby_listing-items\">\n                <div className=\"xt-row xt-row-stretch\">\n                  {category.posts.map(({ post }, z) =>\n                    post.frontmatter.parent === post.frontmatter.title ? (\n                      <div\n                        className={`gatsby_listing-column w-2/4 md:w-2/6 lg:w-2/4 xl:w-2/6 ${\n                          (typeof window === 'undefined' || window.access !== 'admin') &&\n                          post.frontmatter.tags &&\n                          post.frontmatter.tags.includes('hidden')\n                            ? 'hidden'\n                            : ''\n                        }`}\n                        key={z}>\n                        <Link\n                          to={markdownSlug(post)}\n                          className={`xt-card p-3.5 sm:p-5 lg:p-6 ${classes.gatsbyFloat()}`}>\n                          <div className=\"xt-h5 text-base leading-tight mb-2 md:text-lg md:leading-tight md:mb-2 lg:text-xl lg:leading-tight lg:mb-2\">\n                            {post.frontmatter.title}\n                          </div>\n                          <p className=\"xt-p text-sm leading-snug opacity-70\">{post.frontmatter.description}</p>\n                        </Link>\n                      </div>\n                    ) : null\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query ($title: String!, $type: String, $category: String, $parent: String, $parents: String) {\n    menus: allMarkdownRemark(\n      filter: { frontmatter: { menu: { eq: true } } }\n      sort: [{ frontmatter: { date: DESC } }, { frontmatter: { title: ASC } }]\n    ) {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n    categories: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type } } }\n      sort: [{ frontmatter: { date: DESC } }, { frontmatter: { title: ASC } }]\n    ) {\n      category: group(field: { frontmatter: { category: SELECT } }) {\n        title: fieldValue\n        posts: edges {\n          post: node {\n            frontmatter {\n              type\n              category\n              parent\n              title\n              description\n              tags\n            }\n          }\n        }\n      }\n    }\n    postsAll: allMarkdownRemark {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n            description\n          }\n        }\n      }\n    }\n    postsAdiacent: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type }, parent: { regex: $parents } } }\n      sort: [{ frontmatter: { date: DESC } }, { frontmatter: { title: ASC } }]\n    ) {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n          }\n        }\n      }\n    }\n    parent: markdownRemark(frontmatter: { title: { eq: $parent }, category: { eq: $category } }) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        title\n      }\n    }\n    post: markdownRemark(\n      frontmatter: { type: { eq: $type }, category: { eq: $category }, parent: { eq: $parent }, title: { eq: $title } }\n    ) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        title\n        description\n      }\n    }\n  }\n`\n\nTemplate.propTypes = {\n  data: PropTypes.shape({\n    menus: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }),\n          }),\n        })\n      ),\n    }),\n    categories: PropTypes.shape({\n      category: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          posts: PropTypes.arrayOf(\n            PropTypes.shape({\n              post: PropTypes.shape({\n                frontmatter: PropTypes.shape({\n                  type: PropTypes.string.isRequired,\n                  category: PropTypes.string,\n                  parent: PropTypes.string,\n                  title: PropTypes.string.isRequired,\n                  description: PropTypes.string,\n                  tags: PropTypes.array,\n                }),\n              }),\n            })\n          ),\n        })\n      ),\n    }),\n    postsAll: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              category: PropTypes.string,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }),\n          }),\n        })\n      ),\n    }),\n    postsAdiacent: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n            }),\n          }),\n        })\n      ),\n    }),\n    parent: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n      }),\n    }),\n    post: PropTypes.shape({\n      htmlAst: PropTypes.object.isRequired,\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n      }),\n    }),\n  }),\n}\n\nexport default Template\n"],"names":["classes","require","renderAst","RehypeReact","createElement","React","components","demo","Demo","demoinline","DemoInline","Compiler","props","data","seo","title","post","frontmatter","parent","category","type","description","Layout","page","SEO","htmlAst","className","categories","sort","typeSort","map","i","key","split","pop","posts","_ref","z","concat","window","access","tags","includes","Link","to","markdownSlug","gatsbyFloat"],"sourceRoot":""}