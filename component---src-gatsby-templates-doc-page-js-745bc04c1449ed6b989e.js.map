{"version":3,"file":"component---src-gatsby-templates-doc-page-js-745bc04c1449ed6b989e.js","mappings":"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","sources":["webpack://xtendui/./src/gatsby/templates/doc-page.js","webpack://xtendui/./src/gatsby/templates/includes/siteContentful.js","webpack://xtendui/./src/gatsby/templates/includes/video.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\nimport RehypeReact from 'rehype-react'\nimport { markdownSlug } from 'src/gatsby/templates/snippets/markdown-slug'\nimport { useSiteContentful } from 'src/gatsby/templates/includes/siteContentful'\nimport SEO from 'src/gatsby/templates/seo'\nimport Layout from 'src/gatsby/templates/layout'\nimport Demo from 'src/gatsby/templates/demo/demo'\nimport DemoInline from 'src/gatsby/templates/demo/demo-inline'\nimport Video from 'src/gatsby/templates/includes/video'\n\nconst classes = require('src/gatsby/templates/snippets/classes').classes\n\nconst renderAst = new RehypeReact({\n  createElement: React.createElement,\n  components: { demo: Demo, demoinline: DemoInline },\n}).Compiler\n\nfunction Template(props) {\n  const { data } = props\n  const { assets } = useSiteContentful()\n  const seo = {}\n  seo.title = data.post.frontmatter.title\n  seo.title =\n    data.post.frontmatter.parent && data.post.frontmatter.parent !== data.post.frontmatter.title\n      ? `${data.post.frontmatter.parent} ${seo.title}`\n      : seo.title\n  seo.title += ' - '\n  seo.title +=\n    data.post.frontmatter.category && data.post.frontmatter.category !== data.post.frontmatter.title\n      ? ` ${data.post.frontmatter.category}`\n      : ''\n  seo.title +=\n    data.post.frontmatter.type && data.post.frontmatter.type !== data.post.frontmatter.title\n      ? ` ${data.post.frontmatter.type}`\n      : ''\n  seo.description = data.post.frontmatter.description\n    ? data.post.frontmatter.description\n    : data.parent.frontmatter.description\n  return (\n    <Layout page={data}>\n      <SEO title={seo.title} description={seo.description} />\n      {data.post.htmlAst !== '<div></div>' ? renderAst(data.post.htmlAst) : null}\n      {data.post.frontmatter.parent === data.post.frontmatter.title ? (\n        data.postsAdiacent.posts.length > 1 ? (\n          <div className=\"gatsby_listing\">\n            <div className=\"xt-row xt-row-6\">\n              {data.post.frontmatter.type === 'Components' ? (\n                <h2 className={`${classes.hBlock()}`}>{'Sub Pages'}</h2>\n              ) : null}\n              <div className=\"gatsby_listing-group\">\n                <div className=\"gatsby_listing-items\">\n                  <div className=\"xt-row xt-row-stretch\">\n                    {data.postsAdiacent.posts.map(({ post: adiacent }, i) =>\n                      adiacent.frontmatter.parent !== adiacent.frontmatter.title ? (\n                        adiacent.frontmatter.demos ? (\n                          <div\n                            className={`gatsby_listing-column w-2/4 md:w-2/6 lg:w-2/4 xl:w-2/6 ${\n                              (typeof window === 'undefined' || window.access !== 'admin') &&\n                              adiacent.frontmatter.tags &&\n                              adiacent.frontmatter.tags.includes('hidden')\n                                ? 'hidden'\n                                : ''\n                            }`}\n                            key={i}>\n                            <button\n                              type=\"button\"\n                              className={`xt-card flex-col p-3.5 sm:p-5 lg:p-6 ${classes.gatsbyFloat()}`}\n                              data-gatsby-listing-toggle>\n                              <div className=\"xt-h5 mb-auto text-base leading-tight md:text-lg md:leading-tight md:mb-2 lg:text-xl lg:leading-tight\">\n                                {adiacent.frontmatter.title\n                                  .split(/[\\s-]+/)\n                                  .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                  .join(' ')}\n                              </div>\n                              <Video assets={assets} title={adiacent.frontmatter.title} />\n                            </button>\n                            <Demo>\n                              {adiacent.frontmatter.demos.map((demo, i) => {\n                                return (\n                                  <div\n                                    className=\"gatsby_demo_item\"\n                                    data-iframe-fullscreen={`demos/${demo}`}\n                                    key={i}></div>\n                                )\n                              })}\n                            </Demo>\n                          </div>\n                        ) : (\n                          <div className=\"gatsby_listing-column w-2/4 md:w-2/6 lg:w-2/4 xl:w-2/6\" key={i}>\n                            <Link\n                              to={markdownSlug(adiacent)}\n                              className={`xt-card p-3.5 sm:p-5 lg:p-6 ${classes.gatsbyFloat()}`}>\n                              <div className=\"xt-h5 text-base leading-tight mb-2 md:text-lg md:leading-tight md:mb-2 lg:text-xl lg:leading-tight lg:mb-2\">\n                                {adiacent.frontmatter.title}\n                              </div>\n                              <p className=\"xt-p text-sm leading-snug opacity-70\">\n                                {adiacent.frontmatter.description\n                                  ? adiacent.frontmatter.description\n                                  : `${adiacent.frontmatter.parent}'s ${adiacent.frontmatter.title}`}\n                              </p>\n                            </Link>\n                          </div>\n                        )\n                      ) : null\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : null\n      ) : null}\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query ($title: String!, $type: String, $category: String, $parent: String, $parents: String) {\n    menus: allMarkdownRemark(\n      filter: { frontmatter: { menu: { eq: true } } }\n      sort: [{ frontmatter: { date: DESC } }, { frontmatter: { title: ASC } }]\n    ) {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n    categories: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type } } }\n      sort: [{ frontmatter: { date: DESC } }, { frontmatter: { title: ASC } }]\n    ) {\n      category: group(field: { frontmatter: { category: SELECT } }) {\n        title: fieldValue\n        posts: edges {\n          post: node {\n            frontmatter {\n              type\n              category\n              parent\n              title\n              description\n              tags\n            }\n          }\n        }\n      }\n    }\n    postsAll: allMarkdownRemark {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n            description\n          }\n        }\n      }\n    }\n    postsAdiacent: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type }, category: { eq: $category }, parent: { regex: $parents } } }\n      sort: [{ frontmatter: { date: DESC } }, { frontmatter: { title: ASC } }]\n    ) {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n            description\n            tags\n            demos\n          }\n        }\n      }\n    }\n    parent: markdownRemark(frontmatter: { title: { eq: $parent }, category: { eq: $category } }) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        description\n        title\n      }\n    }\n    post: markdownRemark(\n      frontmatter: { type: { eq: $type }, parent: { eq: $parent }, category: { eq: $category }, title: { eq: $title } }\n    ) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        title\n        description\n        tags\n      }\n    }\n  }\n`\n\nTemplate.propTypes = {\n  data: PropTypes.shape({\n    menus: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }),\n          }),\n        })\n      ),\n    }),\n    categories: PropTypes.shape({\n      category: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          posts: PropTypes.arrayOf(\n            PropTypes.shape({\n              post: PropTypes.shape({\n                frontmatter: PropTypes.shape({\n                  type: PropTypes.string.isRequired,\n                  category: PropTypes.string,\n                  parent: PropTypes.string,\n                  title: PropTypes.string.isRequired,\n                  description: PropTypes.string,\n                  tags: PropTypes.array,\n                }),\n              }),\n            })\n          ),\n        })\n      ),\n    }),\n    postsAll: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              category: PropTypes.string,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n              tags: PropTypes.array,\n            }),\n          }),\n        })\n      ),\n    }),\n    postsAdiacent: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              category: PropTypes.string,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n              demos: PropTypes.array,\n            }),\n          }),\n        })\n      ),\n    }),\n    parent: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n      }),\n    }),\n    post: PropTypes.shape({\n      htmlAst: PropTypes.object.isRequired,\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n        tags: PropTypes.array,\n      }),\n    }),\n  }),\n}\n\nexport default Template\n","import { useStaticQuery, graphql } from 'gatsby'\nexport const useSiteContentful = () => {\n  return useStaticQuery(graphql`\n    query {\n      assets: allContentfulAsset {\n        items: edges {\n          item: node {\n            title\n            localFile {\n              publicURL\n            }\n            file {\n              url\n            }\n          }\n        }\n      }\n    }\n  `)\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Video(props) {\n  const { assets, title } = props\n  return (\n    <div className=\"w-full\">\n      {assets.items.filter(x => x.item.title === title).length ? (\n        assets.items.map((files, z) => {\n          if (files.item.title === title && files.item.localFile) {\n            return (\n              <div\n                className=\"xt-media-container bg-gray-200 mt-1 rounded-md border-3 border-gray-100 pb-[59.8%]\"\n                key={z}>\n                <video className=\"gatsby_site-video xt-media object-cover\" preload=\"none\" muted playsInline loop>\n                  <source type=\"video/mp4\" src={files.item.localFile.publicURL} />\n                </video>\n              </div>\n            )\n          }\n        })\n      ) : (\n        <div className=\"xt-media-container bg-gray-200 mt-3 rounded-md border-3 border-gray-100 pb-[59.8%]\">\n          <img className=\"xt-media inset-0 m-auto w-20 lg:w-32\" src=\"/logo-white.svg\" loading=\"lazy\" alt=\"\" />\n        </div>\n      )}\n    </div>\n  )\n}\n\nVideo.propTypes = {\n  assets: PropTypes.shape({\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        item: PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          localFile: PropTypes.shape({\n            publicURL: PropTypes.string.isRequired,\n          }),\n          file: PropTypes.shape({\n            url: PropTypes.string.isRequired,\n          }),\n        }),\n      })\n    ),\n  }),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Video\n"],"names":["classes","require","renderAst","RehypeReact","createElement","React","components","demo","Demo","demoinline","DemoInline","Compiler","props","data","assets","useSiteContentful","seo","title","post","frontmatter","parent","concat","category","type","description","Layout","page","SEO","htmlAst","postsAdiacent","posts","length","className","hBlock","map","_ref","i","adiacent","demos","window","access","tags","includes","key","gatsbyFloat","split","item","charAt","toUpperCase","slice","toLowerCase","join","Video","Link","to","markdownSlug","useStaticQuery","items","filter","x","files","z","localFile","preload","muted","playsInline","loop","src","publicURL","loading","alt"],"sourceRoot":""}