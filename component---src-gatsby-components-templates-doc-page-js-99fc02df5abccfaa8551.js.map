{"version":3,"sources":["webpack:///./src/gatsby/components/includes/doc-video.js","webpack:///./src/gatsby/components/templates/doc-page.js"],"names":["DocVideo","render","adiacent","this","props","query","data","media","items","map","assets","z","item","title","frontmatter","className","key","preload","muted","playsInline","loop","autoPlay","type","src","file","url","React","Component","renderAst","RehypeReact","createElement","components","demo","Demo","demovanilla","DemoVanilla","Compiler","Template","seo","post","split","charAt","toUpperCase","slice","toLowerCase","join","parent","category","description","page","htmlAst","postsAdiacent","posts","length","i","demos","role","data-gatsby-listing-toggle","data-iframe-fullscreen","to","markdownSlug"],"mappings":"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","file":"component---src-gatsby-components-templates-doc-page-js-99fc02df5abccfaa8551.js","sourcesContent":["import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport PropTypes from 'prop-types'\n\nexport default class DocVideo extends React.Component {\n  render() {\n    const { adiacent } = this.props\n    return (\n      <StaticQuery\n        query={graphql`\n          query {\n            media: allContentfulAsset {\n              items: edges {\n                item: node {\n                  title\n                  file {\n                    url\n                  }\n                }\n              }\n            }\n          }\n        `}\n        render={data =>\n          data.media.items.map((assets, z) => {\n            if (assets.item.title === adiacent.frontmatter.title) {\n              return (\n                <div className=\"media-container\" key={z}>\n                  <div className=\"media-inner\">\n                    <video className=\"media object-cover object-center\" preload=\"metadata\" muted playsInline loop autoPlay>\n                      <source type=\"video/mp4\" src={assets.item.file.url ? assets.item.file.url : null} />\n                    </video>\n                  </div>\n                </div>\n              )\n            }\n          })\n        }\n      />\n    )\n  }\n}\n\nDocVideo.propTypes = {\n  data: PropTypes.shape({\n    media: PropTypes.shape({\n      items: PropTypes.arrayOf(\n        PropTypes.shape({\n          item: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            file: PropTypes.shape({\n              url: PropTypes.string.isRequired,\n            }),\n          }),\n        })\n      ),\n    }),\n  }),\n  adiacent: PropTypes.shape({\n    frontmatter: PropTypes.shape({\n      type: PropTypes.string.isRequired,\n      category: PropTypes.string,\n      parent: PropTypes.string,\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      demos: PropTypes.array,\n    }),\n  }),\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\nimport RehypeReact from 'rehype-react'\nimport { markdownSlug } from 'components/snippets/markdown-slug'\n\nimport SEO from 'components/seo'\nimport Layout from 'components/layout'\nimport Demo from 'components/demo/demo'\nimport DemoVanilla from 'components/demo/demo-vanilla'\nimport DocVideo from 'components/includes/doc-video'\n\nconst renderAst = new RehypeReact({\n  createElement: React.createElement,\n  components: { demo: Demo, demovanilla: DemoVanilla },\n}).Compiler\n\nclass Template extends React.Component {\n  render() {\n    const { data } = this.props\n    const seo = {}\n    seo.title = data.post.frontmatter.title\n    seo.title = seo.title\n      .split(/[\\s-]+/)\n      .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n      .join(' ')\n    seo.title =\n      data.post.frontmatter.parent && data.post.frontmatter.parent !== data.post.frontmatter.title ? `${data.post.frontmatter.parent} ${seo.title}` : seo.title\n    seo.title += ' - '\n    seo.title += data.post.frontmatter.category && data.post.frontmatter.category !== data.post.frontmatter.title ? ` ${data.post.frontmatter.category}` : ''\n    seo.title += data.post.frontmatter.type && data.post.frontmatter.type !== data.post.frontmatter.title ? ` ${data.post.frontmatter.type}` : ''\n    seo.description = data.post.frontmatter.description ? data.post.frontmatter.description : data.parent.frontmatter.description\n    return (\n      <Layout page={data}>\n        <SEO title={seo.title} description={seo.description} />\n        {data.post.htmlAst !== '<div></div>' ? renderAst(data.post.htmlAst) : null}\n        {data.post.frontmatter.parent === data.post.frontmatter.title ? (\n          data.postsAdiacent.posts.length > 1 ? (\n            <div className=\"gatsby_listing\">\n              <div className=\"row row-3\">\n                <div className=\"gatsby_listing-group\">\n                  {data.post.frontmatter.category === 'Core' ? (\n                    <h2 className=\"h5 h-block rounded-md text-black links-default bg-gray-200 text-center\">{'Customization and interactions'}</h2>\n                  ) : null}\n                  <div className=\"gatsby_listing-items\">\n                    <div className=\"row row-stretch\">\n                      {data.postsAdiacent.posts.map(({ post: adiacent }, i) =>\n                        adiacent.frontmatter.parent !== adiacent.frontmatter.title ? (\n                          adiacent.frontmatter.demos ? (\n                            <div className=\"gatsby_listing-column\" key={i}>\n                              <a role=\"button\" className=\"card gatsby_listing-item gatsby_listing-item--themes\" data-gatsby-listing-toggle>\n                                <div>\n                                  <div className=\"h4\">\n                                    {adiacent.frontmatter.title\n                                      .split(/[\\s-]+/)\n                                      .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                      .join(' ')}\n                                  </div>\n                                  {process.env.CONTENTFUL_SPACE ? <DocVideo adiacent={adiacent} /> : ''}\n                                </div>\n                              </a>\n                              {adiacent.frontmatter.demos ? (\n                                <Demo>\n                                  {adiacent.frontmatter.demos.map((demo, i) => {\n                                    const type = demo.split('/')[0]\n                                    if (type === 'vanilla') {\n                                      return <DemoVanilla src={demo} key={i}></DemoVanilla>\n                                    } else if (type === 'iframe') {\n                                      return <div className=\"gatsby_demo_item toggle\" data-iframe-fullscreen={demo} key={i}></div>\n                                    }\n                                  })}\n                                </Demo>\n                              ) : null}\n                            </div>\n                          ) : (\n                            <div className=\"gatsby_listing-column\" key={i}>\n                              <Link to={markdownSlug(adiacent)} className=\"card gatsby_listing-item\">\n                                <div className=\"h4\">\n                                  {adiacent.frontmatter.title\n                                    .split(/[\\s-]+/)\n                                    .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                    .join(' ')}\n                                </div>\n                                <p>\n                                  {adiacent.frontmatter.description\n                                    ? adiacent.frontmatter.description\n                                    : `${adiacent.frontmatter.parent}'s ${adiacent.frontmatter.title\n                                        .split(/[\\s-]+/)\n                                        .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                        .join(' ')}`}\n                                </p>\n                              </Link>\n                            </div>\n                          )\n                        ) : null\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : null\n        ) : null}\n      </Layout>\n    )\n  }\n}\n\nexport const query = graphql`\n  query($title: String!, $type: String, $category: String, $parent: String, $parents: String) {\n    categories: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type } } }\n      sort: { fields: [frontmatter___date, frontmatter___title], order: [DESC, ASC] }\n    ) {\n      category: group(field: frontmatter___category) {\n        title: fieldValue\n        posts: edges {\n          post: node {\n            frontmatter {\n              type\n              category\n              parent\n              title\n              description\n              link\n            }\n          }\n        }\n      }\n    }\n    postsAll: allMarkdownRemark {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n            description\n          }\n        }\n      }\n    }\n    postsAdiacent: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type }, category: { eq: $category }, parent: { regex: $parents } } }\n      sort: { fields: [frontmatter___date, frontmatter___title], order: [DESC, ASC] }\n    ) {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n            description\n            demos\n          }\n        }\n      }\n    }\n    parent: markdownRemark(frontmatter: { title: { eq: $parent }, category: { eq: $category } }) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        description\n        title\n      }\n    }\n    post: markdownRemark(frontmatter: { type: { eq: $type }, parent: { eq: $parent }, category: { eq: $category }, title: { eq: $title } }) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        title\n        description\n      }\n    }\n  }\n`\n\nTemplate.propTypes = {\n  data: PropTypes.shape({\n    categories: PropTypes.shape({\n      category: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          posts: PropTypes.arrayOf(\n            PropTypes.shape({\n              post: PropTypes.shape({\n                frontmatter: PropTypes.shape({\n                  type: PropTypes.string.isRequired,\n                  category: PropTypes.string,\n                  parent: PropTypes.string,\n                  title: PropTypes.string.isRequired,\n                  description: PropTypes.string,\n                }),\n              }),\n            })\n          ),\n        })\n      ),\n    }),\n    postsAll: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              category: PropTypes.string,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }),\n          }),\n        })\n      ),\n    }),\n    postsAdiacent: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              category: PropTypes.string,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n              demos: PropTypes.array,\n            }),\n          }),\n        })\n      ),\n    }),\n    parent: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n      }),\n    }),\n    post: PropTypes.shape({\n      htmlAst: PropTypes.object.isRequired,\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n      }),\n    }),\n  }),\n}\n\nexport default Template\n"],"sourceRoot":""}