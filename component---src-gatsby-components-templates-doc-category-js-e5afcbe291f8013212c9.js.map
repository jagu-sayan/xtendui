{"version":3,"sources":["webpack:///./src/gatsby/components/includes/doc-index.js","webpack:///./src/gatsby/components/templates/doc-category.js"],"names":["DocIndex","render","React","Component","Template","data","this","props","seo","title","post","frontmatter","split","map","item","charAt","toUpperCase","slice","toLowerCase","join","parent","category","type","description","markdownSlug","page","className","categories","sort","a","b","i","key","pop","posts","z","link","href","target","rel","to","query"],"mappings":"8NAQeA,E,kGALbC,OAAA,WACE,OAAO,uC,GAFYC,IAAMC,WCOvBC,E,kGACJH,OAAA,WAAU,IACAI,EAASC,KAAKC,MAAdF,KACFG,EAAM,GAWZ,OAVAA,EAAIC,MAAQJ,EAAKK,KAAKC,YAAYF,MAClCD,EAAIC,MAAQD,EAAIC,MACbG,MAAM,UACNC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAGC,iBACzDC,KAAK,KACRX,EAAIC,OAASJ,EAAKK,KAAKC,YAAYS,QAAUf,EAAKK,KAAKC,YAAYS,SAAWf,EAAKK,KAAKC,YAAYF,MAAQJ,EAAKK,KAAKC,YAAYS,OAAS,GAC3IZ,EAAIC,OAASJ,EAAKK,KAAKC,YAAYU,UAAYhB,EAAKK,KAAKC,YAAYU,WAAahB,EAAKK,KAAKC,YAAYF,MAAQJ,EAAKK,KAAKC,YAAYU,SAAW,GACjJb,EAAIC,OAASJ,EAAKK,KAAKC,YAAYW,MAAQjB,EAAKK,KAAKC,YAAYW,OAASjB,EAAKK,KAAKC,YAAYF,MAAQJ,EAAKK,KAAKC,YAAYW,KAAO,GACrId,EAAIe,YAAclB,EAAKK,KAAKC,YAAYY,YACxCf,EAAIC,MAAoC,kBAA5Be,YAAanB,EAAKK,MAA4BF,EAAIe,YAAcf,EAAIC,MAE9E,kBAAC,IAAD,CAAQD,IAAKA,EAAKiB,KAAMpB,GACtB,kBAAC,IAAD,CAAKI,MAAOD,EAAIC,MAAOc,YAAaf,EAAIe,cACX,kBAA5BC,YAAanB,EAAKK,MAEjB,kBAAC,EAAD,MAEA,yBAAKgB,UAAU,kBACb,yBAAKA,UAAU,aACZrB,EAAKsB,WAAWN,SACdO,MAAK,SAACC,EAAGC,GACR,MAAgB,WAAZD,EAAEpB,OAAkC,iBAAZoB,EAAEpB,MAErB,EAEO,SAAZoB,EAAEpB,OAAgC,YAAZoB,EAAEpB,OAAmC,WAAZqB,EAAErB,OAAkC,iBAAZqB,EAAErB,OAEnE,EAGH,KAERI,KAAI,SAACQ,EAAUU,GAAX,OACH,yBAAKL,UAAU,uBAAuBM,IAAKD,GACzC,wBAAIL,UAAU,iDAAiDL,EAASZ,MAAMG,MAAM,KAAKqB,OACzF,yBAAKP,UAAU,wBACb,yBAAKA,UAAU,sBACZL,EAASa,MAAMrB,KAAI,WAAWsB,GAAX,IAAGzB,EAAH,EAAGA,KAAH,OAClBA,EAAKC,YAAYyB,KACf,yBAAKV,UAAU,wBAAwBM,IAAKG,GAC1C,uBAAGE,KAAM3B,EAAKC,YAAYyB,KAAME,OAAO,SAASC,IAAI,aAAab,UAAU,4BACzE,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,MACZhB,EAAKC,YAAYF,MACfG,MAAM,UACNC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAGC,iBACzDC,KAAK,MAEV,2BAAIT,EAAKC,YAAYY,gBAIzBb,EAAKC,YAAYS,SAAWV,EAAKC,YAAYF,MAC/C,yBAAKiB,UAAU,wBAAwBM,IAAKG,GAC1C,kBAAC,OAAD,CAAMK,GAAIhB,YAAad,GAAOgB,UAAU,4BACtC,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,MACZhB,EAAKC,YAAYF,MACfG,MAAM,UACNC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAGC,iBACzDC,KAAK,MAEV,2BAAIT,EAAKC,YAAYY,aACpBb,EAAKC,YAAYyB,QAItB,kB,GAzEPlC,IAAMC,WAyFhBsC,GAFErC,YAEG","file":"component---src-gatsby-components-templates-doc-category-js-e5afcbe291f8013212c9.js","sourcesContent":["import React from 'react'\n\nclass DocIndex extends React.Component {\n  render() {\n    return <div>@TODO</div>\n  }\n}\n\nexport default DocIndex\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\nimport { markdownSlug } from 'components/snippets/markdown-slug'\n\nimport SEO from 'components/seo'\nimport Layout from 'components/layout'\nimport DocIndex from 'components/includes/doc-index'\n\nclass Template extends React.Component {\n  render() {\n    const { data } = this.props\n    const seo = {}\n    seo.title = data.post.frontmatter.title\n    seo.title = seo.title\n      .split(/[\\s-]+/)\n      .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n      .join(' ')\n    seo.title += data.post.frontmatter.parent && data.post.frontmatter.parent !== data.post.frontmatter.title ? data.post.frontmatter.parent : ''\n    seo.title += data.post.frontmatter.category && data.post.frontmatter.category !== data.post.frontmatter.title ? data.post.frontmatter.category : ''\n    seo.title += data.post.frontmatter.type && data.post.frontmatter.type !== data.post.frontmatter.title ? data.post.frontmatter.type : ''\n    seo.description = data.post.frontmatter.description\n    seo.title = markdownSlug(data.post) === '/introduction' ? seo.description : seo.title // @DOCINDEX\n    return (\n      <Layout seo={seo} page={data}>\n        <SEO title={seo.title} description={seo.description} />\n        {markdownSlug(data.post) === '/introduction' ? (\n          // @DOCINDEX\n          <DocIndex />\n        ) : (\n          <div className=\"gatsby_listing\">\n            <div className=\"row row-3\">\n              {data.categories.category\n                .sort((a, b) => {\n                  if (a.title === 'Addons' || a.title === 'By Component') {\n                    // a is less than b by some ordering criterion\n                    return 1\n                  }\n                  if (a.title === 'Core' || a.title === 'By Type' || b.title === 'Addons' || b.title === 'By Component') {\n                    // a is greater than b by the ordering criterion\n                    return -1\n                  }\n                  // a must be equal to b\n                  return 0\n                })\n                .map((category, i) => (\n                  <div className=\"gatsby_listing_group\" key={i}>\n                    <h2 className=\"h5 h-block rounded-md bg-gray-200 text-center\">{category.title.split('-').pop()}</h2>\n                    <div className=\"gatsby_listing_items\">\n                      <div className=\"row row-2 lg:row-4\">\n                        {category.posts.map(({ post }, z) =>\n                          post.frontmatter.link ? (\n                            <div className=\"gatsby_listing_column\" key={z}>\n                              <a href={post.frontmatter.link} target=\"_blank\" rel=\"noreferrer\" className=\"card gatsby_listing_item\">\n                                <div className=\"card-design\"></div>\n                                <div className=\"card-block card-block-md\">\n                                  <div className=\"h4\">\n                                    {post.frontmatter.title\n                                      .split(/[\\s-]+/)\n                                      .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                      .join(' ')}\n                                  </div>\n                                  <p>{post.frontmatter.description}</p>\n                                </div>\n                              </a>\n                            </div>\n                          ) : post.frontmatter.parent === post.frontmatter.title ? (\n                            <div className=\"gatsby_listing_column\" key={z}>\n                              <Link to={markdownSlug(post)} className=\"card gatsby_listing_item\">\n                                <div className=\"card-design\"></div>\n                                <div className=\"card-block card-block-md\">\n                                  <div className=\"h4\">\n                                    {post.frontmatter.title\n                                      .split(/[\\s-]+/)\n                                      .map(item => item.charAt(0).toUpperCase() + item.slice(1).toLowerCase())\n                                      .join(' ')}\n                                  </div>\n                                  <p>{post.frontmatter.description}</p>\n                                  {post.frontmatter.link}\n                                </div>\n                              </Link>\n                            </div>\n                          ) : null\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </div>\n        )}\n      </Layout>\n    )\n  }\n}\n\nexport default Template\n\nexport const query = graphql`\n  query($title: String!, $type: String, $category: String, $parent: String, $parents: String) {\n    categories: allMarkdownRemark(filter: { frontmatter: { type: { eq: $type } } }, sort: { fields: [frontmatter___date, frontmatter___title], order: ASC }) {\n      category: group(field: frontmatter___category) {\n        title: fieldValue\n        posts: edges {\n          post: node {\n            frontmatter {\n              type\n              category\n              parent\n              title\n              description\n              link\n            }\n          }\n        }\n      }\n    }\n    postsAll: allMarkdownRemark {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n            description\n          }\n        }\n      }\n    }\n    postsAdiacent: allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: $type }, parent: { regex: $parents } } }\n      sort: { fields: [frontmatter___date, frontmatter___title], order: [DESC, ASC] }\n    ) {\n      posts: edges {\n        post: node {\n          frontmatter {\n            type\n            category\n            parent\n            title\n          }\n        }\n      }\n    }\n    parent: markdownRemark(frontmatter: { title: { eq: $parent }, category: { eq: $category } }) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        title\n      }\n    }\n    post: markdownRemark(frontmatter: { type: { eq: $type }, category: { eq: $category }, parent: { eq: $parent }, title: { eq: $title } }) {\n      htmlAst\n      frontmatter {\n        type\n        category\n        parent\n        title\n        description\n      }\n    }\n  }\n`\n\nTemplate.propTypes = {\n  data: PropTypes.shape({\n    categories: PropTypes.shape({\n      category: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          posts: PropTypes.arrayOf(\n            PropTypes.shape({\n              post: PropTypes.shape({\n                frontmatter: PropTypes.shape({\n                  type: PropTypes.string.isRequired,\n                  category: PropTypes.string,\n                  parent: PropTypes.string,\n                  title: PropTypes.string.isRequired,\n                  description: PropTypes.string,\n                }).isRequired,\n              }).isRequired,\n            }).isRequired\n          ),\n        }).isRequired\n      ),\n    }),\n    postsAll: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              category: PropTypes.string,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n              description: PropTypes.string,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ),\n    }).isRequired,\n    postsAdiacent: PropTypes.shape({\n      posts: PropTypes.arrayOf(\n        PropTypes.shape({\n          post: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              type: PropTypes.string.isRequired,\n              parent: PropTypes.string,\n              title: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ),\n    }).isRequired,\n    parent: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n      }).isRequired,\n    }),\n    post: PropTypes.shape({\n      htmlAst: PropTypes.object.isRequired,\n      frontmatter: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        category: PropTypes.string,\n        parent: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        description: PropTypes.string,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n}\n"],"sourceRoot":""}